
Projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a0  080063a0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080063a0  080063a0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063a0  080063a0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080063a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001e8  08006590  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08006590  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd3b  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002151  00000000  00000000  0002cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a33  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c113  00000000  00000000  000492b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008df3d  00000000  00000000  000553c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003704  00000000  00000000  000e3380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006020 	.word	0x08006020

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006020 	.word	0x08006020

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	d1ed      	bne.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_fmul>:
 8000b5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b64:	bf1e      	ittt	ne
 8000b66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6a:	ea92 0f0c 	teqne	r2, ip
 8000b6e:	ea93 0f0c 	teqne	r3, ip
 8000b72:	d06f      	beq.n	8000c54 <__aeabi_fmul+0xf8>
 8000b74:	441a      	add	r2, r3
 8000b76:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7a:	0240      	lsls	r0, r0, #9
 8000b7c:	bf18      	it	ne
 8000b7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b82:	d01e      	beq.n	8000bc2 <__aeabi_fmul+0x66>
 8000b84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b90:	fba0 3101 	umull	r3, r1, r0, r1
 8000b94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b9c:	bf3e      	ittt	cc
 8000b9e:	0049      	lslcc	r1, r1, #1
 8000ba0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba4:	005b      	lslcc	r3, r3, #1
 8000ba6:	ea40 0001 	orr.w	r0, r0, r1
 8000baa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bae:	2afd      	cmp	r2, #253	; 0xfd
 8000bb0:	d81d      	bhi.n	8000bee <__aeabi_fmul+0x92>
 8000bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	4770      	bx	lr
 8000bc2:	f090 0f00 	teq	r0, #0
 8000bc6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bca:	bf08      	it	eq
 8000bcc:	0249      	lsleq	r1, r1, #9
 8000bce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd6:	3a7f      	subs	r2, #127	; 0x7f
 8000bd8:	bfc2      	ittt	gt
 8000bda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bde:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be2:	4770      	bxgt	lr
 8000be4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	dc5d      	bgt.n	8000cac <__aeabi_fmul+0x150>
 8000bf0:	f112 0f19 	cmn.w	r2, #25
 8000bf4:	bfdc      	itt	le
 8000bf6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bfa:	4770      	bxle	lr
 8000bfc:	f1c2 0200 	rsb	r2, r2, #0
 8000c00:	0041      	lsls	r1, r0, #1
 8000c02:	fa21 f102 	lsr.w	r1, r1, r2
 8000c06:	f1c2 0220 	rsb	r2, r2, #32
 8000c0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c12:	f140 0000 	adc.w	r0, r0, #0
 8000c16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1a:	bf08      	it	eq
 8000c1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c20:	4770      	bx	lr
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0040      	lsleq	r0, r0, #1
 8000c2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c32:	3a01      	subeq	r2, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fmul+0xce>
 8000c36:	ea40 000c 	orr.w	r0, r0, ip
 8000c3a:	f093 0f00 	teq	r3, #0
 8000c3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0049      	lsleq	r1, r1, #1
 8000c46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c4a:	3b01      	subeq	r3, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fmul+0xe6>
 8000c4e:	ea41 010c 	orr.w	r1, r1, ip
 8000c52:	e78f      	b.n	8000b74 <__aeabi_fmul+0x18>
 8000c54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c58:	ea92 0f0c 	teq	r2, ip
 8000c5c:	bf18      	it	ne
 8000c5e:	ea93 0f0c 	teqne	r3, ip
 8000c62:	d00a      	beq.n	8000c7a <__aeabi_fmul+0x11e>
 8000c64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c68:	bf18      	it	ne
 8000c6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c6e:	d1d8      	bne.n	8000c22 <__aeabi_fmul+0xc6>
 8000c70:	ea80 0001 	eor.w	r0, r0, r1
 8000c74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f090 0f00 	teq	r0, #0
 8000c7e:	bf17      	itett	ne
 8000c80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c84:	4608      	moveq	r0, r1
 8000c86:	f091 0f00 	teqne	r1, #0
 8000c8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c8e:	d014      	beq.n	8000cba <__aeabi_fmul+0x15e>
 8000c90:	ea92 0f0c 	teq	r2, ip
 8000c94:	d101      	bne.n	8000c9a <__aeabi_fmul+0x13e>
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	d10f      	bne.n	8000cba <__aeabi_fmul+0x15e>
 8000c9a:	ea93 0f0c 	teq	r3, ip
 8000c9e:	d103      	bne.n	8000ca8 <__aeabi_fmul+0x14c>
 8000ca0:	024b      	lsls	r3, r1, #9
 8000ca2:	bf18      	it	ne
 8000ca4:	4608      	movne	r0, r1
 8000ca6:	d108      	bne.n	8000cba <__aeabi_fmul+0x15e>
 8000ca8:	ea80 0001 	eor.w	r0, r0, r1
 8000cac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fdiv>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d069      	beq.n	8000db0 <__aeabi_fdiv+0xec>
 8000cdc:	eba2 0203 	sub.w	r2, r2, r3
 8000ce0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce4:	0249      	lsls	r1, r1, #9
 8000ce6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cea:	d037      	beq.n	8000d5c <__aeabi_fdiv+0x98>
 8000cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	bf38      	it	cc
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	bf24      	itt	cs
 8000d0e:	1a5b      	subcs	r3, r3, r1
 8000d10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d18:	bf24      	itt	cs
 8000d1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d26:	bf24      	itt	cs
 8000d28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d34:	bf24      	itt	cs
 8000d36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	bf18      	it	ne
 8000d42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d46:	d1e0      	bne.n	8000d0a <__aeabi_fdiv+0x46>
 8000d48:	2afd      	cmp	r2, #253	; 0xfd
 8000d4a:	f63f af50 	bhi.w	8000bee <__aeabi_fmul+0x92>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d64:	327f      	adds	r2, #127	; 0x7f
 8000d66:	bfc2      	ittt	gt
 8000d68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d70:	4770      	bxgt	lr
 8000d72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	e737      	b.n	8000bee <__aeabi_fmul+0x92>
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fdiv+0xc2>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fdiv+0xda>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e795      	b.n	8000cdc <__aeabi_fdiv+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d108      	bne.n	8000dcc <__aeabi_fdiv+0x108>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	f47f af7d 	bne.w	8000cba <__aeabi_fmul+0x15e>
 8000dc0:	ea93 0f0c 	teq	r3, ip
 8000dc4:	f47f af70 	bne.w	8000ca8 <__aeabi_fmul+0x14c>
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e776      	b.n	8000cba <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	d104      	bne.n	8000ddc <__aeabi_fdiv+0x118>
 8000dd2:	024b      	lsls	r3, r1, #9
 8000dd4:	f43f af4c 	beq.w	8000c70 <__aeabi_fmul+0x114>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	e76e      	b.n	8000cba <__aeabi_fmul+0x15e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1ca      	bne.n	8000d7e <__aeabi_fdiv+0xba>
 8000de8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dec:	f47f af5c 	bne.w	8000ca8 <__aeabi_fmul+0x14c>
 8000df0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	f47f af3c 	bne.w	8000c70 <__aeabi_fmul+0x114>
 8000df8:	e75f      	b.n	8000cba <__aeabi_fmul+0x15e>
 8000dfa:	bf00      	nop

08000dfc <__gesf2>:
 8000dfc:	f04f 3cff 	mov.w	ip, #4294967295
 8000e00:	e006      	b.n	8000e10 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__lesf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	e002      	b.n	8000e10 <__cmpsf2+0x4>
 8000e0a:	bf00      	nop

08000e0c <__cmpsf2>:
 8000e0c:	f04f 0c01 	mov.w	ip, #1
 8000e10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e20:	bf18      	it	ne
 8000e22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e26:	d011      	beq.n	8000e4c <__cmpsf2+0x40>
 8000e28:	b001      	add	sp, #4
 8000e2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2e:	bf18      	it	ne
 8000e30:	ea90 0f01 	teqne	r0, r1
 8000e34:	bf58      	it	pl
 8000e36:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3a:	bf88      	it	hi
 8000e3c:	17c8      	asrhi	r0, r1, #31
 8000e3e:	bf38      	it	cc
 8000e40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e44:	bf18      	it	ne
 8000e46:	f040 0001 	orrne.w	r0, r0, #1
 8000e4a:	4770      	bx	lr
 8000e4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e50:	d102      	bne.n	8000e58 <__cmpsf2+0x4c>
 8000e52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e56:	d105      	bne.n	8000e64 <__cmpsf2+0x58>
 8000e58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e5c:	d1e4      	bne.n	8000e28 <__cmpsf2+0x1c>
 8000e5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e62:	d0e1      	beq.n	8000e28 <__cmpsf2+0x1c>
 8000e64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <__aeabi_cfrcmple>:
 8000e6c:	4684      	mov	ip, r0
 8000e6e:	4608      	mov	r0, r1
 8000e70:	4661      	mov	r1, ip
 8000e72:	e7ff      	b.n	8000e74 <__aeabi_cfcmpeq>

08000e74 <__aeabi_cfcmpeq>:
 8000e74:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e76:	f7ff ffc9 	bl	8000e0c <__cmpsf2>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	bf48      	it	mi
 8000e7e:	f110 0f00 	cmnmi.w	r0, #0
 8000e82:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e84 <__aeabi_fcmpeq>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff fff4 	bl	8000e74 <__aeabi_cfcmpeq>
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2001      	moveq	r0, #1
 8000e90:	2000      	movne	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmplt>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffea 	bl	8000e74 <__aeabi_cfcmpeq>
 8000ea0:	bf34      	ite	cc
 8000ea2:	2001      	movcc	r0, #1
 8000ea4:	2000      	movcs	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmple>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffe0 	bl	8000e74 <__aeabi_cfcmpeq>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpge>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffd2 	bl	8000e6c <__aeabi_cfrcmple>
 8000ec8:	bf94      	ite	ls
 8000eca:	2001      	movls	r0, #1
 8000ecc:	2000      	movhi	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_fcmpgt>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff ffc8 	bl	8000e6c <__aeabi_cfrcmple>
 8000edc:	bf34      	ite	cc
 8000ede:	2001      	movcc	r0, #1
 8000ee0:	2000      	movcs	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_f2uiz>:
 8000ee8:	0042      	lsls	r2, r0, #1
 8000eea:	d20e      	bcs.n	8000f0a <__aeabi_f2uiz+0x22>
 8000eec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef0:	d30b      	bcc.n	8000f0a <__aeabi_f2uiz+0x22>
 8000ef2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efa:	d409      	bmi.n	8000f10 <__aeabi_f2uiz+0x28>
 8000efc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f04:	fa23 f002 	lsr.w	r0, r3, r2
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2uiz+0x32>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d102      	bne.n	8000f20 <__aeabi_f2uiz+0x38>
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	4770      	bx	lr
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <DWT_Delay_Init+0x58>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <DWT_Delay_Init+0x58>)
 8000f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f36:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <DWT_Delay_Init+0x58>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <DWT_Delay_Init+0x58>)
 8000f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f42:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <DWT_Delay_Init+0x5c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <DWT_Delay_Init+0x5c>)
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <DWT_Delay_Init+0x5c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <DWT_Delay_Init+0x5c>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <DWT_Delay_Init+0x5c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000f62:	bf00      	nop
    __ASM volatile ("NOP");
 8000f64:	bf00      	nop
    __ASM volatile ("NOP");
 8000f66:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <DWT_Delay_Init+0x5c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000f74:	2301      	movs	r3, #1
    }
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000edf0 	.word	0xe000edf0
 8000f84:	e0001000 	.word	0xe0001000

08000f88 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <DWT_Delay_us+0x44>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f96:	f003 fdff 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <DWT_Delay_us+0x48>)
 8000f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000fb0:	bf00      	nop
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <DWT_Delay_us+0x44>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1acb      	subs	r3, r1, r3
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3f6      	bcc.n	8000fb2 <DWT_Delay_us+0x2a>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	e0001000 	.word	0xe0001000
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <DWT_Delay_ms+0x40>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000fe2:	f003 fdd9 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <DWT_Delay_ms+0x44>)
 8000fea:	fba3 2302 	umull	r2, r3, r3, r2
 8000fee:	099b      	lsrs	r3, r3, #6
 8000ff0:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000ffc:	bf00      	nop
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <DWT_Delay_ms+0x40>)
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f8      	bcc.n	8000ffe <DWT_Delay_ms+0x2a>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	e0001000 	.word	0xe0001000
 8001018:	10624dd3 	.word	0x10624dd3

0800101c <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <LCD_DATA+0xc4>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <LCD_DATA+0xc4>)
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	f003 f9af 	bl	800439e <HAL_GPIO_WritePin>
 8001040:	e007      	b.n	8001052 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <LCD_DATA+0xc4>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <LCD_DATA+0xc4>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f003 f9a6 	bl	800439e <HAL_GPIO_WritePin>
    if(Data & 2)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <LCD_DATA+0xc4>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <LCD_DATA+0xc4>)
 8001062:	88db      	ldrh	r3, [r3, #6]
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	f003 f999 	bl	800439e <HAL_GPIO_WritePin>
 800106c:	e007      	b.n	800107e <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <LCD_DATA+0xc4>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <LCD_DATA+0xc4>)
 8001074:	88db      	ldrh	r3, [r3, #6]
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	f003 f990 	bl	800439e <HAL_GPIO_WritePin>
    if(Data & 4)
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <LCD_DATA+0xc4>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <LCD_DATA+0xc4>)
 800108e:	891b      	ldrh	r3, [r3, #8]
 8001090:	2201      	movs	r2, #1
 8001092:	4619      	mov	r1, r3
 8001094:	f003 f983 	bl	800439e <HAL_GPIO_WritePin>
 8001098:	e007      	b.n	80010aa <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <LCD_DATA+0xc4>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <LCD_DATA+0xc4>)
 80010a0:	891b      	ldrh	r3, [r3, #8]
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	f003 f97a 	bl	800439e <HAL_GPIO_WritePin>
    if(Data & 8)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <LCD_DATA+0xc4>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <LCD_DATA+0xc4>)
 80010ba:	895b      	ldrh	r3, [r3, #10]
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	f003 f96d 	bl	800439e <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 80010c4:	e007      	b.n	80010d6 <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LCD_DATA+0xc4>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <LCD_DATA+0xc4>)
 80010cc:	895b      	ldrh	r3, [r3, #10]
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f003 f964 	bl	800439e <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08006244 	.word	0x08006244

080010e4 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <LCD_CMD+0x60>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <LCD_CMD+0x60>)
 80010f4:	89db      	ldrh	r3, [r3, #14]
 80010f6:	2200      	movs	r2, #0
 80010f8:	4619      	mov	r1, r3
 80010fa:	f003 f950 	bl	800439e <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff8b 	bl	800101c <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <LCD_CMD+0x60>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <LCD_CMD+0x60>)
 800110c:	899b      	ldrh	r3, [r3, #12]
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f003 f944 	bl	800439e <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <LCD_CMD+0x60>)
 8001118:	8a1b      	ldrh	r3, [r3, #16]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff34 	bl	8000f88 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LCD_CMD+0x60>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <LCD_CMD+0x60>)
 8001126:	899b      	ldrh	r3, [r3, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	f003 f937 	bl	800439e <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <LCD_CMD+0x60>)
 8001132:	8a1b      	ldrh	r3, [r3, #16]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff27 	bl	8000f88 <DWT_Delay_us>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08006244 	.word	0x08006244

08001148 <LCD_Clear>:
void LCD_Clear()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ffc9 	bl	80010e4 <LCD_CMD>
    LCD_CMD(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff ffc6 	bl	80010e4 <LCD_CMD>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d111      	bne.n	8001196 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	337f      	adds	r3, #127	; 0x7f
 8001176:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ffab 	bl	80010e4 <LCD_CMD>
      LCD_CMD(Low4);
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffa7 	bl	80010e4 <LCD_CMD>
    }
    if(r == 2)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d111      	bne.n	80011c0 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	3b41      	subs	r3, #65	; 0x41
 80011a0:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff96 	bl	80010e4 <LCD_CMD>
      LCD_CMD(Low4);
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff92 	bl	80010e4 <LCD_CMD>
    }
    DWT_Delay_ms(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ff07 	bl	8000fd4 <DWT_Delay_ms>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <LCD_Init>:
void LCD_Init()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 80011e4:	f7ff fea0 	bl	8000f28 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 80011e8:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <LCD_Init+0x1d8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6f      	ldr	r2, [pc, #444]	; (80013ac <LCD_Init+0x1dc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10c      	bne.n	800120c <LCD_Init+0x3c>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <LCD_Init+0x1e0>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a6e      	ldr	r2, [pc, #440]	; (80013b0 <LCD_Init+0x1e0>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b6c      	ldr	r3, [pc, #432]	; (80013b0 <LCD_Init+0x1e0>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	e034      	b.n	8001276 <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 800120c:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <LCD_Init+0x1d8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a68      	ldr	r2, [pc, #416]	; (80013b4 <LCD_Init+0x1e4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10c      	bne.n	8001230 <LCD_Init+0x60>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <LCD_Init+0x1e0>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a65      	ldr	r2, [pc, #404]	; (80013b0 <LCD_Init+0x1e0>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <LCD_Init+0x1e0>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	e022      	b.n	8001276 <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 8001230:	4b5d      	ldr	r3, [pc, #372]	; (80013a8 <LCD_Init+0x1d8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <LCD_Init+0x1e8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10c      	bne.n	8001254 <LCD_Init+0x84>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <LCD_Init+0x1e0>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <LCD_Init+0x1e0>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6193      	str	r3, [r2, #24]
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <LCD_Init+0x1e0>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	e010      	b.n	8001276 <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 8001254:	4b54      	ldr	r3, [pc, #336]	; (80013a8 <LCD_Init+0x1d8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a58      	ldr	r2, [pc, #352]	; (80013bc <LCD_Init+0x1ec>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10b      	bne.n	8001276 <LCD_Init+0xa6>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <LCD_Init+0x1e0>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a53      	ldr	r2, [pc, #332]	; (80013b0 <LCD_Init+0x1e0>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <LCD_Init+0x1e0>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 8001276:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <LCD_Init+0x1d8>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <LCD_Init+0x1d8>)
 800127c:	889b      	ldrh	r3, [r3, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	f003 f88c 	bl	800439e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 8001286:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <LCD_Init+0x1d8>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <LCD_Init+0x1d8>)
 800128c:	88db      	ldrh	r3, [r3, #6]
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	f003 f884 	bl	800439e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <LCD_Init+0x1d8>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <LCD_Init+0x1d8>)
 800129c:	891b      	ldrh	r3, [r3, #8]
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	f003 f87c 	bl	800439e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 80012a6:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <LCD_Init+0x1d8>)
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <LCD_Init+0x1d8>)
 80012ac:	895b      	ldrh	r3, [r3, #10]
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	f003 f874 	bl	800439e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <LCD_Init+0x1d8>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <LCD_Init+0x1d8>)
 80012bc:	89db      	ldrh	r3, [r3, #14]
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	f003 f86c 	bl	800439e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <LCD_Init+0x1d8>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <LCD_Init+0x1d8>)
 80012cc:	899b      	ldrh	r3, [r3, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	4619      	mov	r1, r3
 80012d2:	f003 f864 	bl	800439e <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <LCD_Init+0x1d8>)
 80012d8:	889a      	ldrh	r2, [r3, #4]
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <LCD_Init+0x1d8>)
 80012dc:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 80012de:	4313      	orrs	r3, r2
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <LCD_Init+0x1d8>)
 80012e4:	891b      	ldrh	r3, [r3, #8]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <LCD_Init+0x1d8>)
 80012ec:	895b      	ldrh	r3, [r3, #10]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <LCD_Init+0x1d8>)
 80012f4:	89db      	ldrh	r3, [r3, #14]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <LCD_Init+0x1d8>)
 80012fc:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 80012fe:	4313      	orrs	r3, r2
 8001300:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8001302:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <LCD_Init+0x1d8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f107 0210 	add.w	r2, r7, #16
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fece 	bl	80040bc <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <LCD_Init+0x1d8>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <LCD_Init+0x1d8>)
 8001326:	89db      	ldrh	r3, [r3, #14]
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	f003 f837 	bl	800439e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <LCD_Init+0x1d8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <LCD_Init+0x1d8>)
 8001336:	899b      	ldrh	r3, [r3, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	4619      	mov	r1, r3
 800133c:	f003 f82f 	bl	800439e <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fe6b 	bl	800101c <LCD_DATA>
    DWT_Delay_ms(150);
 8001346:	2096      	movs	r0, #150	; 0x96
 8001348:	f7ff fe44 	bl	8000fd4 <DWT_Delay_ms>
    LCD_CMD(0x03);
 800134c:	2003      	movs	r0, #3
 800134e:	f7ff fec9 	bl	80010e4 <LCD_CMD>
    DWT_Delay_ms(5);
 8001352:	2005      	movs	r0, #5
 8001354:	f7ff fe3e 	bl	8000fd4 <DWT_Delay_ms>
    LCD_CMD(0x03);
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec3 	bl	80010e4 <LCD_CMD>
    DWT_Delay_us(150);
 800135e:	2096      	movs	r0, #150	; 0x96
 8001360:	f7ff fe12 	bl	8000f88 <DWT_Delay_us>
    LCD_CMD(0x03);
 8001364:	2003      	movs	r0, #3
 8001366:	f7ff febd 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x02);
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff feba 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff feb7 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x08);
 8001376:	2008      	movs	r0, #8
 8001378:	f7ff feb4 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x00);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff feb1 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x0C);
 8001382:	200c      	movs	r0, #12
 8001384:	f7ff feae 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x00);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff feab 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x06);
 800138e:	2006      	movs	r0, #6
 8001390:	f7ff fea8 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x00);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fea5 	bl	80010e4 <LCD_CMD>
    LCD_CMD(0x01);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff fea2 	bl	80010e4 <LCD_CMD>
}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	08006244 	.word	0x08006244
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40011400 	.word	0x40011400

080013c0 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f023 030f 	bic.w	r3, r3, #15
 80013d8:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <LCD_Write_Char+0xb0>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <LCD_Write_Char+0xb0>)
 80013e0:	89db      	ldrh	r3, [r3, #14]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4619      	mov	r1, r3
 80013e6:	f002 ffda 	bl	800439e <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe13 	bl	800101c <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <LCD_Write_Char+0xb0>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <LCD_Write_Char+0xb0>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	f002 ffcc 	bl	800439e <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <LCD_Write_Char+0xb0>)
 8001408:	8a1b      	ldrh	r3, [r3, #16]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fdbc 	bl	8000f88 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <LCD_Write_Char+0xb0>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <LCD_Write_Char+0xb0>)
 8001416:	899b      	ldrh	r3, [r3, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	f002 ffbf 	bl	800439e <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <LCD_Write_Char+0xb0>)
 8001422:	8a1b      	ldrh	r3, [r3, #16]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fdaf 	bl	8000f88 <DWT_Delay_us>

   LCD_DATA(Low4);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fdf5 	bl	800101c <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <LCD_Write_Char+0xb0>)
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <LCD_Write_Char+0xb0>)
 8001438:	899b      	ldrh	r3, [r3, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	4619      	mov	r1, r3
 800143e:	f002 ffae 	bl	800439e <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <LCD_Write_Char+0xb0>)
 8001444:	8a1b      	ldrh	r3, [r3, #16]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fd9e 	bl	8000f88 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LCD_Write_Char+0xb0>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <LCD_Write_Char+0xb0>)
 8001452:	899b      	ldrh	r3, [r3, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	f002 ffa1 	bl	800439e <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <LCD_Write_Char+0xb0>)
 800145e:	8a1b      	ldrh	r3, [r3, #16]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fd91 	bl	8000f88 <DWT_Delay_us>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08006244 	.word	0x08006244

08001474 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e009      	b.n	8001496 <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff98 	bl	80013c0 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ef      	bne.n	8001482 <LCD_Write_String+0xe>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <capsules_init>:
#import "capsules.h"

void capsules_init(void)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	strcpy(capsulas[0].nome, "                ");
 80014b0:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <capsules_init+0x200>)
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <capsules_init+0x204>)
 80014b4:	4614      	mov	r4, r2
 80014b6:	461d      	mov	r5, r3
 80014b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[0].tipo_agua, '\0');
 80014c0:	2100      	movs	r1, #0
 80014c2:	487c      	ldr	r0, [pc, #496]	; (80016b4 <capsules_init+0x208>)
 80014c4:	f004 fcb2 	bl	8005e2c <strcpy>
	capsulas[0].tempo_agua = 0;
 80014c8:	4b78      	ldr	r3, [pc, #480]	; (80016ac <capsules_init+0x200>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
	capsulas[0].temperatura_agua = 0;
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <capsules_init+0x200>)
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
	capsulas[0].com_gas = nao;
 80014d8:	4b74      	ldr	r3, [pc, #464]	; (80016ac <capsules_init+0x200>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	capsulas[0].tempo_gas = 0;
 80014e0:	4b72      	ldr	r3, [pc, #456]	; (80016ac <capsules_init+0x200>)
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28

	strcpy(capsulas[1].nome, "      Agua      ");
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <capsules_init+0x200>)
 80014ea:	4a73      	ldr	r2, [pc, #460]	; (80016b8 <capsules_init+0x20c>)
 80014ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80014f0:	4615      	mov	r5, r2
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[1].tipo_agua, '\0');
 80014fa:	2100      	movs	r1, #0
 80014fc:	486f      	ldr	r0, [pc, #444]	; (80016bc <capsules_init+0x210>)
 80014fe:	f004 fc95 	bl	8005e2c <strcpy>
	capsulas[1].tempo_agua = 1.5;
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <capsules_init+0x200>)
 8001504:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001508:	649a      	str	r2, [r3, #72]	; 0x48
	capsulas[1].temperatura_agua = 0;
 800150a:	4b68      	ldr	r3, [pc, #416]	; (80016ac <capsules_init+0x200>)
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	64da      	str	r2, [r3, #76]	; 0x4c
	capsulas[1].com_gas = nao;
 8001512:	4b66      	ldr	r3, [pc, #408]	; (80016ac <capsules_init+0x200>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	capsulas[1].tempo_gas = 0;
 800151a:	4b64      	ldr	r3, [pc, #400]	; (80016ac <capsules_init+0x200>)
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	655a      	str	r2, [r3, #84]	; 0x54

	strcpy(capsulas[2].nome, "  Agua com gas  ");
 8001522:	4b62      	ldr	r3, [pc, #392]	; (80016ac <capsules_init+0x200>)
 8001524:	4a66      	ldr	r2, [pc, #408]	; (80016c0 <capsules_init+0x214>)
 8001526:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800152a:	4615      	mov	r5, r2
 800152c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[2].tipo_agua, "gelada");
 8001534:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <capsules_init+0x218>)
 8001536:	4a64      	ldr	r2, [pc, #400]	; (80016c8 <capsules_init+0x21c>)
 8001538:	6810      	ldr	r0, [r2, #0]
 800153a:	6018      	str	r0, [r3, #0]
 800153c:	8891      	ldrh	r1, [r2, #4]
 800153e:	7992      	ldrb	r2, [r2, #6]
 8001540:	8099      	strh	r1, [r3, #4]
 8001542:	719a      	strb	r2, [r3, #6]
	capsulas[2].tempo_agua = 3;
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <capsules_init+0x200>)
 8001546:	4a61      	ldr	r2, [pc, #388]	; (80016cc <capsules_init+0x220>)
 8001548:	675a      	str	r2, [r3, #116]	; 0x74
	capsulas[2].temperatura_agua = 15;
 800154a:	4b58      	ldr	r3, [pc, #352]	; (80016ac <capsules_init+0x200>)
 800154c:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <capsules_init+0x224>)
 800154e:	679a      	str	r2, [r3, #120]	; 0x78
	capsulas[2].com_gas = sim;
 8001550:	4b56      	ldr	r3, [pc, #344]	; (80016ac <capsules_init+0x200>)
 8001552:	2201      	movs	r2, #1
 8001554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	capsulas[2].tempo_gas = 1.5;
 8001558:	4b54      	ldr	r3, [pc, #336]	; (80016ac <capsules_init+0x200>)
 800155a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800155e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	strcpy(capsulas[3].nome, "   Cha gelado   ");
 8001562:	4b52      	ldr	r3, [pc, #328]	; (80016ac <capsules_init+0x200>)
 8001564:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <capsules_init+0x228>)
 8001566:	f103 0484 	add.w	r4, r3, #132	; 0x84
 800156a:	4615      	mov	r5, r2
 800156c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[3].tipo_agua, "gelada");
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <capsules_init+0x22c>)
 8001576:	4a54      	ldr	r2, [pc, #336]	; (80016c8 <capsules_init+0x21c>)
 8001578:	6810      	ldr	r0, [r2, #0]
 800157a:	6018      	str	r0, [r3, #0]
 800157c:	8891      	ldrh	r1, [r2, #4]
 800157e:	7992      	ldrb	r2, [r2, #6]
 8001580:	8099      	strh	r1, [r3, #4]
 8001582:	719a      	strb	r2, [r3, #6]
	capsulas[3].tempo_agua = 2.7;
 8001584:	4b49      	ldr	r3, [pc, #292]	; (80016ac <capsules_init+0x200>)
 8001586:	4a55      	ldr	r2, [pc, #340]	; (80016dc <capsules_init+0x230>)
 8001588:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	capsulas[3].temperatura_agua = 20;
 800158c:	4b47      	ldr	r3, [pc, #284]	; (80016ac <capsules_init+0x200>)
 800158e:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <capsules_init+0x234>)
 8001590:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	capsulas[3].com_gas = nao;
 8001594:	4b45      	ldr	r3, [pc, #276]	; (80016ac <capsules_init+0x200>)
 8001596:	2200      	movs	r2, #0
 8001598:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	capsulas[3].tempo_gas = 0;
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <capsules_init+0x200>)
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	strcpy(capsulas[4].nome, "   Cha quente   ");
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <capsules_init+0x200>)
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <capsules_init+0x238>)
 80015aa:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80015ae:	4615      	mov	r5, r2
 80015b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[4].tipo_agua, "quente");
 80015b8:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <capsules_init+0x23c>)
 80015ba:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <capsules_init+0x240>)
 80015bc:	6810      	ldr	r0, [r2, #0]
 80015be:	6018      	str	r0, [r3, #0]
 80015c0:	8891      	ldrh	r1, [r2, #4]
 80015c2:	7992      	ldrb	r2, [r2, #6]
 80015c4:	8099      	strh	r1, [r3, #4]
 80015c6:	719a      	strb	r2, [r3, #6]
	capsulas[4].tempo_agua = 2.7;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <capsules_init+0x200>)
 80015ca:	4a44      	ldr	r2, [pc, #272]	; (80016dc <capsules_init+0x230>)
 80015cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	capsulas[4].temperatura_agua = 60;
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <capsules_init+0x200>)
 80015d2:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <capsules_init+0x244>)
 80015d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	capsulas[4].com_gas = nao;
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <capsules_init+0x200>)
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	capsulas[4].tempo_gas = 0;
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <capsules_init+0x200>)
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	strcpy(capsulas[5].nome, "  Refrigerante  ");
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <capsules_init+0x200>)
 80015ec:	4a41      	ldr	r2, [pc, #260]	; (80016f4 <capsules_init+0x248>)
 80015ee:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 80015f2:	4615      	mov	r5, r2
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	7023      	strb	r3, [r4, #0]
	strcpy(capsulas[5].tipo_agua, "gelada");
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <capsules_init+0x24c>)
 80015fe:	4a32      	ldr	r2, [pc, #200]	; (80016c8 <capsules_init+0x21c>)
 8001600:	6810      	ldr	r0, [r2, #0]
 8001602:	6018      	str	r0, [r3, #0]
 8001604:	8891      	ldrh	r1, [r2, #4]
 8001606:	7992      	ldrb	r2, [r2, #6]
 8001608:	8099      	strh	r1, [r3, #4]
 800160a:	719a      	strb	r2, [r3, #6]
	capsulas[5].tempo_agua = 4;
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <capsules_init+0x200>)
 800160e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001612:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	capsulas[5].temperatura_agua = 17;
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <capsules_init+0x200>)
 8001618:	4a38      	ldr	r2, [pc, #224]	; (80016fc <capsules_init+0x250>)
 800161a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	capsulas[5].com_gas = sim;
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <capsules_init+0x200>)
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	capsulas[5].tempo_gas = 2.56;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <capsules_init+0x200>)
 8001628:	4a35      	ldr	r2, [pc, #212]	; (8001700 <capsules_init+0x254>)
 800162a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	strcpy(capsulas[6].nome, "inexistente");
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <capsules_init+0x258>)
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <capsules_init+0x25c>)
 8001632:	ca07      	ldmia	r2, {r0, r1, r2}
 8001634:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(capsulas[6].tipo_agua, '\0');
 8001638:	2100      	movs	r1, #0
 800163a:	4834      	ldr	r0, [pc, #208]	; (800170c <capsules_init+0x260>)
 800163c:	f004 fbf6 	bl	8005e2c <strcpy>
	capsulas[6].tempo_agua = 0;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <capsules_init+0x200>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	capsulas[6].temperatura_agua = 0;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <capsules_init+0x200>)
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	capsulas[6].com_gas = nao;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <capsules_init+0x200>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	capsulas[6].tempo_gas = 0;
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <capsules_init+0x200>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

	strcpy(capsulas[7].nome, " inexistente ");
 8001666:	4a2a      	ldr	r2, [pc, #168]	; (8001710 <capsules_init+0x264>)
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <capsules_init+0x268>)
 800166a:	4614      	mov	r4, r2
 800166c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166e:	c407      	stmia	r4!, {r0, r1, r2}
 8001670:	8023      	strh	r3, [r4, #0]
	strcpy(capsulas[7].tipo_agua, "quente");
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <capsules_init+0x26c>)
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <capsules_init+0x240>)
 8001676:	6810      	ldr	r0, [r2, #0]
 8001678:	6018      	str	r0, [r3, #0]
 800167a:	8891      	ldrh	r1, [r2, #4]
 800167c:	7992      	ldrb	r2, [r2, #6]
 800167e:	8099      	strh	r1, [r3, #4]
 8001680:	719a      	strb	r2, [r3, #6]
	capsulas[7].tempo_agua = 0;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <capsules_init+0x200>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	capsulas[7].temperatura_agua = 0;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <capsules_init+0x200>)
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	capsulas[7].com_gas = 0;
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <capsules_init+0x200>)
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	capsulas[7].tempo_gas = 0;
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <capsules_init+0x200>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
}
 80016a8:	bf00      	nop
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}
 80016ac:	20000210 	.word	0x20000210
 80016b0:	08006038 	.word	0x08006038
 80016b4:	20000221 	.word	0x20000221
 80016b8:	0800604c 	.word	0x0800604c
 80016bc:	2000024d 	.word	0x2000024d
 80016c0:	08006060 	.word	0x08006060
 80016c4:	20000279 	.word	0x20000279
 80016c8:	08006074 	.word	0x08006074
 80016cc:	40400000 	.word	0x40400000
 80016d0:	41700000 	.word	0x41700000
 80016d4:	0800607c 	.word	0x0800607c
 80016d8:	200002a5 	.word	0x200002a5
 80016dc:	402ccccd 	.word	0x402ccccd
 80016e0:	41a00000 	.word	0x41a00000
 80016e4:	08006090 	.word	0x08006090
 80016e8:	200002d1 	.word	0x200002d1
 80016ec:	080060a4 	.word	0x080060a4
 80016f0:	42700000 	.word	0x42700000
 80016f4:	080060ac 	.word	0x080060ac
 80016f8:	200002fd 	.word	0x200002fd
 80016fc:	41880000 	.word	0x41880000
 8001700:	4023d70a 	.word	0x4023d70a
 8001704:	20000318 	.word	0x20000318
 8001708:	080060c0 	.word	0x080060c0
 800170c:	20000329 	.word	0x20000329
 8001710:	20000344 	.word	0x20000344
 8001714:	080060cc 	.word	0x080060cc
 8001718:	20000355 	.word	0x20000355

0800171c <capsules_get_value>:

uint8_t capsules_get_value(GPIO_TypeDef * GPIO, uint16_t Bn1_bit0, uint16_t Bn1_bit1, uint16_t Bn1_bit2)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4603      	mov	r3, r0
 800172c:	817b      	strh	r3, [r7, #10]
 800172e:	460b      	mov	r3, r1
 8001730:	813b      	strh	r3, [r7, #8]
 8001732:	4613      	mov	r3, r2
 8001734:	80fb      	strh	r3, [r7, #6]
	state_Bn1_bit0 = HAL_GPIO_ReadPin(GPIO, Bn1_bit0);
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	4619      	mov	r1, r3
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f002 fe18 	bl	8004370 <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <capsules_get_value+0x74>)
 8001746:	701a      	strb	r2, [r3, #0]
	state_Bn1_bit1 = HAL_GPIO_ReadPin(GPIO, Bn1_bit1);
 8001748:	893b      	ldrh	r3, [r7, #8]
 800174a:	4619      	mov	r1, r3
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f002 fe0f 	bl	8004370 <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <capsules_get_value+0x78>)
 8001758:	701a      	strb	r2, [r3, #0]
	state_Bn1_bit2 = HAL_GPIO_ReadPin(GPIO, Bn1_bit2);
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4619      	mov	r1, r3
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f002 fe06 	bl	8004370 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <capsules_get_value+0x7c>)
 800176a:	701a      	strb	r2, [r3, #0]

	return ((state_Bn1_bit2 * 4) + (state_Bn1_bit1 * 2) + state_Bn1_bit0);
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <capsules_get_value+0x7c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <capsules_get_value+0x78>)
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	4413      	add	r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <capsules_get_value+0x74>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2db      	uxtb	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000371 	.word	0x20000371
 8001794:	2000020c 	.word	0x2000020c
 8001798:	20000370 	.word	0x20000370
 800179c:	00000000 	.word	0x00000000

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b598      	push	{r3, r4, r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a4:	f001 fcbc 	bl	8003120 <HAL_Init>

  /* USER CODE BEGIN Init */
  SystemClock_Config();
 80017a8:	f000 fed4 	bl	8002554 <SystemClock_Config>
  MX_GPIO_Init();
 80017ac:	f001 f934 	bl	8002a18 <MX_GPIO_Init>
  LCD_Init();
 80017b0:	f7ff fd0e 	bl	80011d0 <LCD_Init>
  LCD_Clear();
 80017b4:	f7ff fcc8 	bl	8001148 <LCD_Clear>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 fecc 	bl	8002554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f001 f92c 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c0:	f001 f90c 	bl	80029dc <MX_DMA_Init>
  MX_ADC1_Init();
 80017c4:	f000 ff1e 	bl	8002604 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017c8:	f000 ffe0 	bl	800278c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017cc:	f001 f86a 	bl	80028a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017d0:	f001 f8b6 	bl	8002940 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Calibração do ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80017d4:	489e      	ldr	r0, [pc, #632]	; (8001a50 <main+0x2b0>)
 80017d6:	f002 f8d9 	bl	800398c <HAL_ADCEx_Calibration_Start>

  //Inicializa timers
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017da:	2100      	movs	r1, #0
 80017dc:	489d      	ldr	r0, [pc, #628]	; (8001a54 <main+0x2b4>)
 80017de:	f003 fc83 	bl	80050e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017e2:	2104      	movs	r1, #4
 80017e4:	489b      	ldr	r0, [pc, #620]	; (8001a54 <main+0x2b4>)
 80017e6:	f003 fc7f 	bl	80050e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80017ea:	489b      	ldr	r0, [pc, #620]	; (8001a58 <main+0x2b8>)
 80017ec:	f003 fbd2 	bl	8004f94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80017f0:	489a      	ldr	r0, [pc, #616]	; (8001a5c <main+0x2bc>)
 80017f2:	f003 fbcf 	bl	8004f94 <HAL_TIM_Base_Start_IT>

  //captura a hora do sistema e converte para uint
  strcpy(aux3, __TIME__);
 80017f6:	4a9a      	ldr	r2, [pc, #616]	; (8001a60 <main+0x2c0>)
 80017f8:	4b9a      	ldr	r3, [pc, #616]	; (8001a64 <main+0x2c4>)
 80017fa:	cb03      	ldmia	r3!, {r0, r1}
 80017fc:	6010      	str	r0, [r2, #0]
 80017fe:	6051      	str	r1, [r2, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	7213      	strb	r3, [r2, #8]
  horas = atoi(aux3);
 8001804:	4896      	ldr	r0, [pc, #600]	; (8001a60 <main+0x2c0>)
 8001806:	f004 fac7 	bl	8005d98 <atoi>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <main+0x2c8>)
 8001810:	801a      	strh	r2, [r3, #0]
  strcpy(aux3, __TIME__ + 3);
 8001812:	4b96      	ldr	r3, [pc, #600]	; (8001a6c <main+0x2cc>)
 8001814:	4619      	mov	r1, r3
 8001816:	4892      	ldr	r0, [pc, #584]	; (8001a60 <main+0x2c0>)
 8001818:	f004 fb08 	bl	8005e2c <strcpy>
  minutos = atoi(aux3);
 800181c:	4890      	ldr	r0, [pc, #576]	; (8001a60 <main+0x2c0>)
 800181e:	f004 fabb 	bl	8005d98 <atoi>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <main+0x2d0>)
 8001828:	801a      	strh	r2, [r3, #0]
  strcpy(aux3, __TIME__ + 6);
 800182a:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <main+0x2d4>)
 800182c:	4619      	mov	r1, r3
 800182e:	488c      	ldr	r0, [pc, #560]	; (8001a60 <main+0x2c0>)
 8001830:	f004 fafc 	bl	8005e2c <strcpy>
  segundos = atoi(aux3);
 8001834:	488a      	ldr	r0, [pc, #552]	; (8001a60 <main+0x2c0>)
 8001836:	f004 faaf 	bl	8005d98 <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <main+0x2d8>)
 8001840:	801a      	strh	r2, [r3, #0]

  //Inicializa o display
  LCD_Init();
 8001842:	f7ff fcc5 	bl	80011d0 <LCD_Init>
  LCD_Clear();
 8001846:	f7ff fc7f 	bl	8001148 <LCD_Clear>
  LCD_Set_Cursor(2, 1);
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f7ff fc85 	bl	800115c <LCD_Set_Cursor>
  LCD_Write_String(" LIGANDO ");
 8001852:	488a      	ldr	r0, [pc, #552]	; (8001a7c <main+0x2dc>)
 8001854:	f7ff fe0e 	bl	8001474 <LCD_Write_String>
  HAL_Delay(1500);
 8001858:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800185c:	f001 fcc2 	bl	80031e4 <HAL_Delay>

  //Insere as informações das capsulas na estrutura
  capsules_init();
 8001860:	f7ff fe24 	bl	80014ac <capsules_init>

  /* Infinite loop */
  LCD_Clear();
 8001864:	f7ff fc70 	bl	8001148 <LCD_Clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    //identificando capsula
    Bn1 = capsules_get_value(GPIOA, Bn1_bit0, Bn1_bit1, Bn1_bit2);
 8001868:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <main+0x2e0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b299      	uxth	r1, r3
 800186e:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <main+0x2e4>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b84      	ldr	r3, [pc, #528]	; (8001a88 <main+0x2e8>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4884      	ldr	r0, [pc, #528]	; (8001a8c <main+0x2ec>)
 800187c:	f7ff ff4e 	bl	800171c <capsules_get_value>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b82      	ldr	r3, [pc, #520]	; (8001a90 <main+0x2f0>)
 8001886:	701a      	strb	r2, [r3, #0]

    //status dos pressostatos
    estadoP1 = HAL_GPIO_ReadPin(GPIOB, P1);
 8001888:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <main+0x2f4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4619      	mov	r1, r3
 8001890:	4881      	ldr	r0, [pc, #516]	; (8001a98 <main+0x2f8>)
 8001892:	f002 fd6d 	bl	8004370 <HAL_GPIO_ReadPin>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <main+0x2fc>)
 800189c:	701a      	strb	r2, [r3, #0]
    estadoP2 = HAL_GPIO_ReadPin(GPIOB, P2);
 800189e:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <main+0x300>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4619      	mov	r1, r3
 80018a6:	487c      	ldr	r0, [pc, #496]	; (8001a98 <main+0x2f8>)
 80018a8:	f002 fd62 	bl	8004370 <HAL_GPIO_ReadPin>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <main+0x304>)
 80018b2:	701a      	strb	r2, [r3, #0]

    // verifica se filtro ta ok e se tem co2
    if (!estadoP1)
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <main+0x2fc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10b      	bne.n	80018d4 <main+0x134>
    {
      LCD_Clear();
 80018bc:	f7ff fc44 	bl	8001148 <LCD_Clear>
      LCD_Set_Cursor(1, 1);
 80018c0:	2101      	movs	r1, #1
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff fc4a 	bl	800115c <LCD_Set_Cursor>
      LCD_Write_String("Filtro Saturado");
 80018c8:	4877      	ldr	r0, [pc, #476]	; (8001aa8 <main+0x308>)
 80018ca:	f7ff fdd3 	bl	8001474 <LCD_Write_String>
      tela = 0;
 80018ce:	4b77      	ldr	r3, [pc, #476]	; (8001aac <main+0x30c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
    }

    if ((Bn1 == 0 && !estadoP2 && capsulas[Bn1].com_gas == sim) || (!estadoP1 && !estadoP2))
 80018d4:	4b6e      	ldr	r3, [pc, #440]	; (8001a90 <main+0x2f0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d110      	bne.n	80018fe <main+0x15e>
 80018dc:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <main+0x304>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10c      	bne.n	80018fe <main+0x15e>
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <main+0x2f0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4a71      	ldr	r2, [pc, #452]	; (8001ab0 <main+0x310>)
 80018ec:	232c      	movs	r3, #44	; 0x2c
 80018ee:	fb03 f301 	mul.w	r3, r3, r1
 80018f2:	4413      	add	r3, r2
 80018f4:	3324      	adds	r3, #36	; 0x24
 80018f6:	f993 3000 	ldrsb.w	r3, [r3]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d007      	beq.n	800190e <main+0x16e>
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <main+0x2fc>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <main+0x180>
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <main+0x304>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <main+0x180>
    {
      //Se sem CO2 e sem CAPSULAS Ou pressostatos vazios}
      LCD_Clear();
 800190e:	f7ff fc1b 	bl	8001148 <LCD_Clear>
      LCD_Set_Cursor(1, 1);
 8001912:	2101      	movs	r1, #1
 8001914:	2001      	movs	r0, #1
 8001916:	f7ff fc21 	bl	800115c <LCD_Set_Cursor>
      LCD_Write_String("CO2 vazio");
 800191a:	4866      	ldr	r0, [pc, #408]	; (8001ab4 <main+0x314>)
 800191c:	f7ff fdaa 	bl	8001474 <LCD_Write_String>
    }

    switch (tela)
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <main+0x30c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b0b      	cmp	r3, #11
 8001926:	d89f      	bhi.n	8001868 <main+0xc8>
 8001928:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <main+0x190>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001961 	.word	0x08001961
 8001934:	0800199d 	.word	0x0800199d
 8001938:	08001b69 	.word	0x08001b69
 800193c:	08001bbd 	.word	0x08001bbd
 8001940:	08002007 	.word	0x08002007
 8001944:	08002289 	.word	0x08002289
 8001948:	08001869 	.word	0x08001869
 800194c:	08001869 	.word	0x08001869
 8001950:	08001869 	.word	0x08001869
 8001954:	08001869 	.word	0x08001869
 8001958:	080022b9 	.word	0x080022b9
 800195c:	08002381 	.word	0x08002381
    {
    case 0:

      //identifica se tem capsula e mostra hora
      atualiza_hora(horas, minutos, segundos);
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <main+0x2c8>)
 8001962:	8818      	ldrh	r0, [r3, #0]
 8001964:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <main+0x2d0>)
 8001966:	8819      	ldrh	r1, [r3, #0]
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <main+0x2d8>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	f001 f98d 	bl	8002c8c <atualiza_hora>

      //se tem capsula vai pra prox tela
      if (Bn1 != 0 && estadoP1)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <main+0x2f0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <main+0x1ec>
 800197a:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <main+0x2fc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <main+0x1ec>
      {
        tela = 1;
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <main+0x30c>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
      else
      {
        estadoRelogio = 0;
        HAL_Delay(50);
      }
      break;
 8001988:	f000 bdb8 	b.w	80024fc <main+0xd5c>
        estadoRelogio = 0;
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <main+0x318>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
        HAL_Delay(50);
 8001992:	2032      	movs	r0, #50	; 0x32
 8001994:	f001 fc26 	bl	80031e4 <HAL_Delay>
      break;
 8001998:	f000 bdb0 	b.w	80024fc <main+0xd5c>

    case 1: //entra auqi para identificar a capsula

      if (strcmp(capsulas[Bn1].nome, "Cap. nao cadast.") == 0 || Bn1 == 0)
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <main+0x2f0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	232c      	movs	r3, #44	; 0x2c
 80019a4:	fb03 f302 	mul.w	r3, r3, r2
 80019a8:	4a41      	ldr	r2, [pc, #260]	; (8001ab0 <main+0x310>)
 80019aa:	4413      	add	r3, r2
 80019ac:	4943      	ldr	r1, [pc, #268]	; (8001abc <main+0x31c>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fbce 	bl	8000150 <strcmp>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <main+0x222>
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <main+0x2f0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <main+0x238>
      {
        //Se n existe a capsula
        tela = 1;
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <main+0x30c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
        estadoRelogio = 0;
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <main+0x318>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
        HAL_Delay(50);
 80019ce:	2032      	movs	r0, #50	; 0x32
 80019d0:	f001 fc08 	bl	80031e4 <HAL_Delay>
        break;
 80019d4:	f000 bd92 	b.w	80024fc <main+0xd5c>
      }

      if (capsulas[Bn1].com_gas == sim && !estadoP2)
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <main+0x2f0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <main+0x310>)
 80019e0:	232c      	movs	r3, #44	; 0x2c
 80019e2:	fb03 f301 	mul.w	r3, r3, r1
 80019e6:	4413      	add	r3, r2
 80019e8:	3324      	adds	r3, #36	; 0x24
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <main+0x264>
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <main+0x304>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d104      	bne.n	8001a04 <main+0x264>
      {
        //Se precisa de gas e n tem trava
        tela = 0;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <main+0x30c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
        break;
 8001a00:	f000 bd7c 	b.w	80024fc <main+0xd5c>
      }

      if (strcmp(capsulas[Bn1].nome, "      Agua      ") == 0 && selecao == -1)
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <main+0x2f0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	232c      	movs	r3, #44	; 0x2c
 8001a0c:	fb03 f302 	mul.w	r3, r3, r2
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <main+0x310>)
 8001a12:	4413      	add	r3, r2
 8001a14:	492a      	ldr	r1, [pc, #168]	; (8001ac0 <main+0x320>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fb9a 	bl	8000150 <strcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <main+0x29e>
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <main+0x324>)
 8001a24:	f993 3000 	ldrsb.w	r3, [r3]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d107      	bne.n	8001a3e <main+0x29e>
      {
        //muda de estado se precisa escolher agua
        tela = 10;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <main+0x30c>)
 8001a30:	220a      	movs	r2, #10
 8001a32:	701a      	strb	r2, [r3, #0]
        selecao = 0;
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <main+0x324>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
        break;
 8001a3a:	f000 bd5f 	b.w	80024fc <main+0xd5c>
      }

      if (estadoRelogio)
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <main+0x318>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <main+0x328>
      {
        //Se der pau e cancelar mostra relogio
        tela = 0;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <main+0x30c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e057      	b.n	8001afe <main+0x35e>
 8001a4e:	bf00      	nop
 8001a50:	2000042c 	.word	0x2000042c
 8001a54:	200004b8 	.word	0x200004b8
 8001a58:	200003dc 	.word	0x200003dc
 8001a5c:	20000388 	.word	0x20000388
 8001a60:	200004b4 	.word	0x200004b4
 8001a64:	080060dc 	.word	0x080060dc
 8001a68:	20000374 	.word	0x20000374
 8001a6c:	080060df 	.word	0x080060df
 8001a70:	20000504 	.word	0x20000504
 8001a74:	080060e2 	.word	0x080060e2
 8001a78:	20000426 	.word	0x20000426
 8001a7c:	080060e8 	.word	0x080060e8
 8001a80:	20000208 	.word	0x20000208
 8001a84:	20000209 	.word	0x20000209
 8001a88:	2000020a 	.word	0x2000020a
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	200003d4 	.word	0x200003d4
 8001a94:	20000000 	.word	0x20000000
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	20000376 	.word	0x20000376
 8001aa0:	20000001 	.word	0x20000001
 8001aa4:	20000424 	.word	0x20000424
 8001aa8:	080060f4 	.word	0x080060f4
 8001aac:	2000045c 	.word	0x2000045c
 8001ab0:	20000210 	.word	0x20000210
 8001ab4:	08006104 	.word	0x08006104
 8001ab8:	200004b0 	.word	0x200004b0
 8001abc:	08006110 	.word	0x08006110
 8001ac0:	08006124 	.word	0x08006124
 8001ac4:	2000000a 	.word	0x2000000a
      }
      else
      {
        LCD_Clear();
 8001ac8:	f7ff fb3e 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(1, 1);
 8001acc:	2101      	movs	r1, #1
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff fb44 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(capsulas[Bn1].nome);
 8001ad4:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <main+0x48c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	232c      	movs	r3, #44	; 0x2c
 8001adc:	fb03 f302 	mul.w	r3, r3, r2
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <main+0x490>)
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fcc5 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 1);
 8001aea:	2101      	movs	r1, #1
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff fb35 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(" Press S Start ");
 8001af2:	4850      	ldr	r0, [pc, #320]	; (8001c34 <main+0x494>)
 8001af4:	f7ff fcbe 	bl	8001474 <LCD_Write_String>
        HAL_Delay(50);
 8001af8:	2032      	movs	r0, #50	; 0x32
 8001afa:	f001 fb73 	bl	80031e4 <HAL_Delay>
      }

      if (state_btn_s)
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <main+0x498>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d024      	beq.n	8001b50 <main+0x3b0>
      {
        if (strcmp(capsulas[Bn1].nome, "      Agua      ") == 0 && selecao == 4)
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <main+0x48c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	232c      	movs	r3, #44	; 0x2c
 8001b0e:	fb03 f302 	mul.w	r3, r3, r2
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <main+0x490>)
 8001b14:	4413      	add	r3, r2
 8001b16:	4949      	ldr	r1, [pc, #292]	; (8001c3c <main+0x49c>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fb19 	bl	8000150 <strcmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <main+0x3a4>
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <main+0x4a0>)
 8001b26:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d10a      	bne.n	8001b44 <main+0x3a4>
        {
          //Caso o usuario tenha inserido a capsula de Agua e não selecionato o
          tela = 10;
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <main+0x4a4>)
 8001b30:	220a      	movs	r2, #10
 8001b32:	701a      	strb	r2, [r3, #0]
          state_btn_s = 0;
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <main+0x498>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
          estadoRelogio = 0;
 8001b3a:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <main+0x4a8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
          break;
 8001b40:	f000 bcdc 	b.w	80024fc <main+0xd5c>
        }
        tela = 2;
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <main+0x4a4>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	701a      	strb	r2, [r3, #0]
        estadoRelogio = 0;
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <main+0x4a8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
      }

      if (state_btn_c)
 8001b50:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <main+0x4ac>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 84c4 	beq.w	80024e2 <main+0xd42>
      { //Se o usuário inseriu a capsula e cancelou o início - muda o status do relógio
        estadoRelogio = 1;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <main+0x4a8>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
        LCD_Clear();
 8001b60:	f7ff faf2 	bl	8001148 <LCD_Clear>
      }

      break;
 8001b64:	f000 bcbd 	b.w	80024e2 <main+0xd42>

    case 2:

      compararcap = Bn1;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <main+0x48c>)
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <main+0x4b0>)
 8001b6e:	701a      	strb	r2, [r3, #0]
      Bn1 = capsules_get_value(GPIOA, Bn1_bit0, Bn1_bit1, Bn1_bit2);
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <main+0x4b4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b299      	uxth	r1, r3
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <main+0x4b8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <main+0x4bc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4837      	ldr	r0, [pc, #220]	; (8001c60 <main+0x4c0>)
 8001b84:	f7ff fdca 	bl	800171c <capsules_get_value>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <main+0x48c>)
 8001b8e:	701a      	strb	r2, [r3, #0]

      if (Bn1 != compararcap)
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <main+0x48c>)
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <main+0x4b0>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d005      	beq.n	8001ba8 <main+0x408>
      {
        tela = 1;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <main+0x4a4>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
        estadoRelogio = 1;
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <main+0x4a8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
      }

      if (state_btn_s == 1)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <main+0x498>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 849b 	bne.w	80024e8 <main+0xd48>
      {
        tela = 3;
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <main+0x4a4>)
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001bb8:	f000 bc96 	b.w	80024e8 <main+0xd48>

    case 3: //Identifica qual o tipo de água da capsula e faz o aquecimento ou resfriamento se necessário

      //Leitura das temperaturas ////
      T1 = 0;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <main+0x4c4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	801a      	strh	r2, [r3, #0]
      T2 = 0;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <main+0x4c8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
      for (j = 0; j < 6; j++)
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <main+0x4cc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e0bd      	b.n	8001d4c <main+0x5ac>
      { //Lê 6 vezes os 12 canias para ter 36 amostra de cada sensor de temperatura
        HAL_ADC_Start_DMA(&hadc1, adcData, NUMBER_OF_CONVERSION);
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <main+0x4d0>)
 8001bd4:	4827      	ldr	r0, [pc, #156]	; (8001c74 <main+0x4d4>)
 8001bd6:	f001 fbff 	bl	80033d8 <HAL_ADC_Start_DMA>
        while (!adcDataReady)
 8001bda:	bf00      	nop
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <main+0x4d8>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0fb      	beq.n	8001bdc <main+0x43c>
        {
        }
        if (adcDataReady)
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <main+0x4d8>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80aa 	beq.w	8001d42 <main+0x5a2>
        {
          adcDataReady = 0;
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <main+0x4d8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
          aux1 = 0;
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <main+0x4dc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
          aux1 = 0;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <main+0x4dc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < NUMBER_OF_CONVERSION; i++)
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <main+0x4e0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e04e      	b.n	8001ca6 <main+0x506>
          {
            if (i < 6)
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <main+0x4e0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	dc39      	bgt.n	8001c84 <main+0x4e4>
            {
              aux1 += adcData[i];
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <main+0x4e0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a16      	ldr	r2, [pc, #88]	; (8001c70 <main+0x4d0>)
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <main+0x4dc>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <main+0x4dc>)
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	e038      	b.n	8001c9c <main+0x4fc>
 8001c2a:	bf00      	nop
 8001c2c:	200003d4 	.word	0x200003d4
 8001c30:	20000210 	.word	0x20000210
 8001c34:	08006138 	.word	0x08006138
 8001c38:	200003d5 	.word	0x200003d5
 8001c3c:	08006124 	.word	0x08006124
 8001c40:	2000000a 	.word	0x2000000a
 8001c44:	2000045c 	.word	0x2000045c
 8001c48:	200004b0 	.word	0x200004b0
 8001c4c:	20000380 	.word	0x20000380
 8001c50:	200003d6 	.word	0x200003d6
 8001c54:	20000208 	.word	0x20000208
 8001c58:	20000209 	.word	0x20000209
 8001c5c:	2000020a 	.word	0x2000020a
 8001c60:	40010800 	.word	0x40010800
 8001c64:	200004b2 	.word	0x200004b2
 8001c68:	20000378 	.word	0x20000378
 8001c6c:	2000037c 	.word	0x2000037c
 8001c70:	20000508 	.word	0x20000508
 8001c74:	2000042c 	.word	0x2000042c
 8001c78:	20000502 	.word	0x20000502
 8001c7c:	20000506 	.word	0x20000506
 8001c80:	20000460 	.word	0x20000460
            }
            else
            {
              aux2 += adcData[i];
 8001c84:	4baa      	ldr	r3, [pc, #680]	; (8001f30 <main+0x790>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4aaa      	ldr	r2, [pc, #680]	; (8001f34 <main+0x794>)
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4ba9      	ldr	r3, [pc, #676]	; (8001f38 <main+0x798>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4ba7      	ldr	r3, [pc, #668]	; (8001f38 <main+0x798>)
 8001c9a:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < NUMBER_OF_CONVERSION; i++)
 8001c9c:	4ba4      	ldr	r3, [pc, #656]	; (8001f30 <main+0x790>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4aa3      	ldr	r2, [pc, #652]	; (8001f30 <main+0x790>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4ba2      	ldr	r3, [pc, #648]	; (8001f30 <main+0x790>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b0b      	cmp	r3, #11
 8001cac:	ddac      	ble.n	8001c08 <main+0x468>
            }
          }
          aux1 /= (NUMBER_OF_CONVERSION / 2);
 8001cae:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <main+0x79c>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	4aa3      	ldr	r2, [pc, #652]	; (8001f40 <main+0x7a0>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b9f      	ldr	r3, [pc, #636]	; (8001f3c <main+0x79c>)
 8001cbe:	801a      	strh	r2, [r3, #0]
          aux2 /= (NUMBER_OF_CONVERSION / 2);
 8001cc0:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <main+0x798>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	4a9e      	ldr	r2, [pc, #632]	; (8001f40 <main+0x7a0>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b9a      	ldr	r3, [pc, #616]	; (8001f38 <main+0x798>)
 8001cd0:	801a      	strh	r2, [r3, #0]
          aux1 *= scala_temperatura;
 8001cd2:	4b9a      	ldr	r3, [pc, #616]	; (8001f3c <main+0x79c>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fb96 	bl	8000408 <__aeabi_i2d>
 8001cdc:	a392      	add	r3, pc, #584	; (adr r3, 8001f28 <main+0x788>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fbfb 	bl	80004dc <__aeabi_dmul>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	4618      	mov	r0, r3
 8001cec:	4621      	mov	r1, r4
 8001cee:	f7fe fe07 	bl	8000900 <__aeabi_d2uiz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <main+0x79c>)
 8001cf8:	801a      	strh	r2, [r3, #0]
          aux2 *= scala_temperatura;
 8001cfa:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <main+0x798>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fb82 	bl	8000408 <__aeabi_i2d>
 8001d04:	a388      	add	r3, pc, #544	; (adr r3, 8001f28 <main+0x788>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fbe7 	bl	80004dc <__aeabi_dmul>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460c      	mov	r4, r1
 8001d12:	4618      	mov	r0, r3
 8001d14:	4621      	mov	r1, r4
 8001d16:	f7fe fdf3 	bl	8000900 <__aeabi_d2uiz>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b86      	ldr	r3, [pc, #536]	; (8001f38 <main+0x798>)
 8001d20:	801a      	strh	r2, [r3, #0]
          T1 += aux1;
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <main+0x7a4>)
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <main+0x79c>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b85      	ldr	r3, [pc, #532]	; (8001f44 <main+0x7a4>)
 8001d30:	801a      	strh	r2, [r3, #0]
          T2 += aux2;
 8001d32:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <main+0x7a8>)
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <main+0x798>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <main+0x7a8>)
 8001d40:	801a      	strh	r2, [r3, #0]
      for (j = 0; j < 6; j++)
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <main+0x7ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	4a80      	ldr	r2, [pc, #512]	; (8001f4c <main+0x7ac>)
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <main+0x7ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	f77f af3d 	ble.w	8001bd0 <main+0x430>
        }
      }
      T1 /= 6;
 8001d56:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <main+0x7a4>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	4a79      	ldr	r2, [pc, #484]	; (8001f40 <main+0x7a0>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b77      	ldr	r3, [pc, #476]	; (8001f44 <main+0x7a4>)
 8001d66:	801a      	strh	r2, [r3, #0]
      T2 /= 6;
 8001d68:	4b77      	ldr	r3, [pc, #476]	; (8001f48 <main+0x7a8>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	4a74      	ldr	r2, [pc, #464]	; (8001f40 <main+0x7a0>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b74      	ldr	r3, [pc, #464]	; (8001f48 <main+0x7a8>)
 8001d78:	801a      	strh	r2, [r3, #0]
      if (T1 > 100)
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <main+0x7a4>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d902      	bls.n	8001d88 <main+0x5e8>
        T1 = 100;
 8001d82:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <main+0x7a4>)
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	801a      	strh	r2, [r3, #0]
      if (T1 < 5)
 8001d88:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <main+0x7a4>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d802      	bhi.n	8001d96 <main+0x5f6>
        T1 = 5;
 8001d90:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <main+0x7a4>)
 8001d92:	2205      	movs	r2, #5
 8001d94:	801a      	strh	r2, [r3, #0]
      if (T2 > 50)
 8001d96:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <main+0x7a8>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2b32      	cmp	r3, #50	; 0x32
 8001d9c:	d902      	bls.n	8001da4 <main+0x604>
        T2 = 50;
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <main+0x7a8>)
 8001da0:	2232      	movs	r2, #50	; 0x32
 8001da2:	801a      	strh	r2, [r3, #0]
      if (T2 < 5)
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <main+0x7a8>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d802      	bhi.n	8001db2 <main+0x612>
        T2 = 5;
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <main+0x7a8>)
 8001dae:	2205      	movs	r2, #5
 8001db0:	801a      	strh	r2, [r3, #0]

      if (strcmp(capsulas[Bn1].tipo_agua, "quente") == 0)
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <main+0x7b0>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	232c      	movs	r3, #44	; 0x2c
 8001dba:	fb03 f302 	mul.w	r3, r3, r2
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	4a64      	ldr	r2, [pc, #400]	; (8001f54 <main+0x7b4>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4964      	ldr	r1, [pc, #400]	; (8001f58 <main+0x7b8>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe f9c1 	bl	8000150 <strcmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d160      	bne.n	8001e96 <main+0x6f6>
      {
        LCD_Clear();
 8001dd4:	f7ff f9b8 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(1, 1);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f9be 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(" Aquecendo agua ");
 8001de0:	485e      	ldr	r0, [pc, #376]	; (8001f5c <main+0x7bc>)
 8001de2:	f7ff fb47 	bl	8001474 <LCD_Write_String>
        HAL_Delay(40);
 8001de6:	2028      	movs	r0, #40	; 0x28
 8001de8:	f001 f9fc 	bl	80031e4 <HAL_Delay>
        if (T1 >= capsulas[Bn1].temperatura_agua)
 8001dec:	4b55      	ldr	r3, [pc, #340]	; (8001f44 <main+0x7a4>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fe5f 	bl	8000ab4 <__aeabi_i2f>
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <main+0x7b0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <main+0x7b4>)
 8001dfe:	232c      	movs	r3, #44	; 0x2c
 8001e00:	fb03 f301 	mul.w	r3, r3, r1
 8001e04:	4413      	add	r3, r2
 8001e06:	3320      	adds	r3, #32
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7ff f858 	bl	8000ec0 <__aeabi_fcmpge>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d013      	beq.n	8001e3e <main+0x69e>
        {                                             //Se a temperatura da água estiver menor ou igual a temperatura especificada na capsula
          HAL_GPIO_WritePin(GPIOB, Y1, GPIO_PIN_SET); //Abre valvula de aguá gelada
 8001e16:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <main+0x7c0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4850      	ldr	r0, [pc, #320]	; (8001f64 <main+0x7c4>)
 8001e22:	f002 fabc 	bl	800439e <HAL_GPIO_WritePin>
          tela = 4;                                   //Avança para o próximo estado
 8001e26:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <main+0x7c8>)
 8001e28:	2204      	movs	r2, #4
 8001e2a:	701a      	strb	r2, [r3, #0]
          dutyCycle_TIM2_CH1 = 0;                     //Desliga o compressor
 8001e2c:	4b4f      	ldr	r3, [pc, #316]	; (8001f6c <main+0x7cc>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
          TIM2->CCR1 = dutyCycle_TIM2_CH1;
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	4b4d      	ldr	r3, [pc, #308]	; (8001f6c <main+0x7cc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e3c:	e02b      	b.n	8001e96 <main+0x6f6>
        }
        else
        {                                                                                                                 //Senão faz a ação de controle
          dutyCycle_TIM2_CH1 = (100 - ((T1 * 100) / capsulas[Bn1].temperatura_agua)) * (MAX_DUTY_CYCLE_VALUE_TIM2 / 100); //Equação para o controle proporcional da resitencia
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <main+0x7a4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	2364      	movs	r3, #100	; 0x64
 8001e46:	fb03 f302 	mul.w	r3, r3, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fe32 	bl	8000ab4 <__aeabi_i2f>
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <main+0x7b0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4a3f      	ldr	r2, [pc, #252]	; (8001f54 <main+0x7b4>)
 8001e58:	232c      	movs	r3, #44	; 0x2c
 8001e5a:	fb03 f301 	mul.w	r3, r3, r1
 8001e5e:	4413      	add	r3, r2
 8001e60:	3320      	adds	r3, #32
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f7fe ff2d 	bl	8000cc4 <__aeabi_fdiv>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4840      	ldr	r0, [pc, #256]	; (8001f70 <main+0x7d0>)
 8001e70:	f7fe fd6a 	bl	8000948 <__aeabi_fsub>
 8001e74:	4603      	mov	r3, r0
 8001e76:	493f      	ldr	r1, [pc, #252]	; (8001f74 <main+0x7d4>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fe6f 	bl	8000b5c <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f831 	bl	8000ee8 <__aeabi_f2uiz>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <main+0x7cc>)
 8001e8a:	601a      	str	r2, [r3, #0]
          TIM2->CCR1 = dutyCycle_TIM2_CH1;
 8001e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <main+0x7cc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6353      	str	r3, [r2, #52]	; 0x34
        }
      }

      if (strcmp(capsulas[Bn1].tipo_agua, "gelada") == 0)
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <main+0x7b0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	232c      	movs	r3, #44	; 0x2c
 8001e9e:	fb03 f302 	mul.w	r3, r3, r2
 8001ea2:	3310      	adds	r3, #16
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <main+0x7b4>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4933      	ldr	r1, [pc, #204]	; (8001f78 <main+0x7d8>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe f94f 	bl	8000150 <strcmp>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d17f      	bne.n	8001fb8 <main+0x818>
      { //Se a temperatura da água estiver maior ou igual a temperatura especificada na capsula
        LCD_Clear();
 8001eb8:	f7ff f946 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(2, 1);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f7ff f94c 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("  Gelando agua  ");
 8001ec4:	482d      	ldr	r0, [pc, #180]	; (8001f7c <main+0x7dc>)
 8001ec6:	f7ff fad5 	bl	8001474 <LCD_Write_String>
        HAL_Delay(40);
 8001eca:	2028      	movs	r0, #40	; 0x28
 8001ecc:	f001 f98a 	bl	80031e4 <HAL_Delay>
        if (T2 <= capsulas[Bn1].temperatura_agua)
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <main+0x7a8>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fded 	bl	8000ab4 <__aeabi_i2f>
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <main+0x7b0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <main+0x7b4>)
 8001ee2:	232c      	movs	r3, #44	; 0x2c
 8001ee4:	fb03 f301 	mul.w	r3, r3, r1
 8001ee8:	4413      	add	r3, r2
 8001eea:	3320      	adds	r3, #32
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe ffdc 	bl	8000eac <__aeabi_fcmple>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d046      	beq.n	8001f88 <main+0x7e8>
        {
          HAL_GPIO_WritePin(GPIOB, Y2, GPIO_PIN_SET); //Abre valvula de água quente
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <main+0x7e0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2201      	movs	r2, #1
 8001f02:	4619      	mov	r1, r3
 8001f04:	4817      	ldr	r0, [pc, #92]	; (8001f64 <main+0x7c4>)
 8001f06:	f002 fa4a 	bl	800439e <HAL_GPIO_WritePin>
          tela = 4;                                   //Avança para o próximo estado
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <main+0x7c8>)
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	701a      	strb	r2, [r3, #0]
          dutyCycle_TIM2_CH2 = 0;                     //Desliga a resitência
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <main+0x7e4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
          TIM2->CCR2 = dutyCycle_TIM2_CH2;
 8001f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <main+0x7e4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6393      	str	r3, [r2, #56]	; 0x38
 8001f20:	e04a      	b.n	8001fb8 <main+0x818>
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	14a14a15 	.word	0x14a14a15
 8001f2c:	3fc4a14a 	.word	0x3fc4a14a
 8001f30:	20000460 	.word	0x20000460
 8001f34:	20000508 	.word	0x20000508
 8001f38:	20000428 	.word	0x20000428
 8001f3c:	20000506 	.word	0x20000506
 8001f40:	aaaaaaab 	.word	0xaaaaaaab
 8001f44:	200004b2 	.word	0x200004b2
 8001f48:	20000378 	.word	0x20000378
 8001f4c:	2000037c 	.word	0x2000037c
 8001f50:	200003d4 	.word	0x200003d4
 8001f54:	20000210 	.word	0x20000210
 8001f58:	08006148 	.word	0x08006148
 8001f5c:	08006150 	.word	0x08006150
 8001f60:	20000204 	.word	0x20000204
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	2000045c 	.word	0x2000045c
 8001f6c:	200003d0 	.word	0x200003d0
 8001f70:	42c80000 	.word	0x42c80000
 8001f74:	41f00000 	.word	0x41f00000
 8001f78:	08006164 	.word	0x08006164
 8001f7c:	0800616c 	.word	0x0800616c
 8001f80:	20000205 	.word	0x20000205
 8001f84:	20000464 	.word	0x20000464
        }
        else
        {                                                                             //Senão faz a ação de controle
          dutyCycle_TIM2_CH2 = ((T2 * 100) / 50) * (MAX_DUTY_CYCLE_VALUE_TIM2 / 100); //Equação para o controle proporcional do compressor
 8001f88:	4ba9      	ldr	r3, [pc, #676]	; (8002230 <main+0xa90>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2364      	movs	r3, #100	; 0x64
 8001f90:	fb03 f302 	mul.w	r3, r3, r2
 8001f94:	4aa7      	ldr	r2, [pc, #668]	; (8002234 <main+0xa94>)
 8001f96:	fb82 1203 	smull	r1, r2, r2, r3
 8001f9a:	1112      	asrs	r2, r2, #4
 8001f9c:	17db      	asrs	r3, r3, #31
 8001f9e:	1ad2      	subs	r2, r2, r3
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4ba3      	ldr	r3, [pc, #652]	; (8002238 <main+0xa98>)
 8001fac:	601a      	str	r2, [r3, #0]
          TIM2->CCR2 = dutyCycle_TIM2_CH2;
 8001fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fb2:	4ba1      	ldr	r3, [pc, #644]	; (8002238 <main+0xa98>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6393      	str	r3, [r2, #56]	; 0x38
        }
      }

      if (strcmp(capsulas[Bn1].tipo_agua, "natural") == 0)
 8001fb8:	4ba0      	ldr	r3, [pc, #640]	; (800223c <main+0xa9c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	232c      	movs	r3, #44	; 0x2c
 8001fc0:	fb03 f302 	mul.w	r3, r3, r2
 8001fc4:	3310      	adds	r3, #16
 8001fc6:	4a9e      	ldr	r2, [pc, #632]	; (8002240 <main+0xaa0>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	499d      	ldr	r1, [pc, #628]	; (8002244 <main+0xaa4>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe f8be 	bl	8000150 <strcmp>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 8289 	bne.w	80024ee <main+0xd4e>
      { //Se o tipo de água for natural só abre a valvula
        LCD_Clear();
 8001fdc:	f7ff f8b4 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(2, 1);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f7ff f8ba 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("  Agua natural  ");
 8001fe8:	4897      	ldr	r0, [pc, #604]	; (8002248 <main+0xaa8>)
 8001fea:	f7ff fa43 	bl	8001474 <LCD_Write_String>
        HAL_GPIO_WritePin(GPIOB, Y3, GPIO_PIN_SET); //Abre valvula de água natural
 8001fee:	4b97      	ldr	r3, [pc, #604]	; (800224c <main+0xaac>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4895      	ldr	r0, [pc, #596]	; (8002250 <main+0xab0>)
 8001ffa:	f002 f9d0 	bl	800439e <HAL_GPIO_WritePin>
        tela = 4;                                   //Avança para o próximo estado
 8001ffe:	4b95      	ldr	r3, [pc, #596]	; (8002254 <main+0xab4>)
 8002000:	2204      	movs	r2, #4
 8002002:	701a      	strb	r2, [r3, #0]
      }

      break;
 8002004:	e273      	b.n	80024ee <main+0xd4e>

    case 4: //Ativa a bomba e o CO2
      LCD_Clear();
 8002006:	f7ff f89f 	bl	8001148 <LCD_Clear>
      LCD_Set_Cursor(2, 0);
 800200a:	2100      	movs	r1, #0
 800200c:	2002      	movs	r0, #2
 800200e:	f7ff f8a5 	bl	800115c <LCD_Set_Cursor>
      LCD_Write_String(" preparando");
 8002012:	4891      	ldr	r0, [pc, #580]	; (8002258 <main+0xab8>)
 8002014:	f7ff fa2e 	bl	8001474 <LCD_Write_String>
      LCD_Set_Cursor(2, 1);
 8002018:	2101      	movs	r1, #1
 800201a:	2002      	movs	r0, #2
 800201c:	f7ff f89e 	bl	800115c <LCD_Set_Cursor>
      LCD_Write_String(" bebida");
 8002020:	488e      	ldr	r0, [pc, #568]	; (800225c <main+0xabc>)
 8002022:	f7ff fa27 	bl	8001474 <LCD_Write_String>

      if (capsulas[Bn1].com_gas == sim)
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <main+0xa9c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4619      	mov	r1, r3
 800202c:	4a84      	ldr	r2, [pc, #528]	; (8002240 <main+0xaa0>)
 800202e:	232c      	movs	r3, #44	; 0x2c
 8002030:	fb03 f301 	mul.w	r3, r3, r1
 8002034:	4413      	add	r3, r2
 8002036:	3324      	adds	r3, #36	; 0x24
 8002038:	f993 3000 	ldrsb.w	r3, [r3]
 800203c:	2b01      	cmp	r3, #1
 800203e:	f040 808a 	bne.w	8002156 <main+0x9b6>
      {

        HAL_GPIO_WritePin(GPIOB, Y4, GPIO_PIN_SET); //Abre valvula de gás
 8002042:	4b87      	ldr	r3, [pc, #540]	; (8002260 <main+0xac0>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	2201      	movs	r2, #1
 800204a:	4619      	mov	r1, r3
 800204c:	4880      	ldr	r0, [pc, #512]	; (8002250 <main+0xab0>)
 800204e:	f002 f9a6 	bl	800439e <HAL_GPIO_WritePin>
        for (i = 0; i <= 3000; i++)
 8002052:	4b84      	ldr	r3, [pc, #528]	; (8002264 <main+0xac4>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e010      	b.n	800207c <main+0x8dc>
        { //Liga gradualmente a bomba
          dutyCycle_TIM1_CH4 = i;
 800205a:	4b82      	ldr	r3, [pc, #520]	; (8002264 <main+0xac4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <main+0xac8>)
 8002062:	601a      	str	r2, [r3, #0]
          TIM1->CCR4 = dutyCycle_TIM1_CH4;
 8002064:	4a81      	ldr	r2, [pc, #516]	; (800226c <main+0xacc>)
 8002066:	4b80      	ldr	r3, [pc, #512]	; (8002268 <main+0xac8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6413      	str	r3, [r2, #64]	; 0x40
          HAL_Delay(0.06);
 800206c:	2000      	movs	r0, #0
 800206e:	f001 f8b9 	bl	80031e4 <HAL_Delay>
        for (i = 0; i <= 3000; i++)
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <main+0xac4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <main+0xac4>)
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b79      	ldr	r3, [pc, #484]	; (8002264 <main+0xac4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002084:	4293      	cmp	r3, r2
 8002086:	dde8      	ble.n	800205a <main+0x8ba>
        }

        HAL_Delay(((capsulas[Bn1].tempo_gas) * 1000) - 200);
 8002088:	4b6c      	ldr	r3, [pc, #432]	; (800223c <main+0xa9c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <main+0xaa0>)
 8002090:	232c      	movs	r3, #44	; 0x2c
 8002092:	fb03 f301 	mul.w	r3, r3, r1
 8002096:	4413      	add	r3, r2
 8002098:	3328      	adds	r3, #40	; 0x28
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4974      	ldr	r1, [pc, #464]	; (8002270 <main+0xad0>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fd5c 	bl	8000b5c <__aeabi_fmul>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4973      	ldr	r1, [pc, #460]	; (8002274 <main+0xad4>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fc4d 	bl	8000948 <__aeabi_fsub>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff19 	bl	8000ee8 <__aeabi_f2uiz>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 f893 	bl	80031e4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, Y4, GPIO_PIN_RESET); //Fecha valvula de gas
 80020be:	4b68      	ldr	r3, [pc, #416]	; (8002260 <main+0xac0>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	4619      	mov	r1, r3
 80020c8:	4861      	ldr	r0, [pc, #388]	; (8002250 <main+0xab0>)
 80020ca:	f002 f968 	bl	800439e <HAL_GPIO_WritePin>
        HAL_Delay(
            ((capsulas[Bn1].tempo_agua - capsulas[Bn1].tempo_gas) * 1000) - 250);
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <main+0xa9c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <main+0xaa0>)
 80020d6:	232c      	movs	r3, #44	; 0x2c
 80020d8:	fb03 f301 	mul.w	r3, r3, r1
 80020dc:	4413      	add	r3, r2
 80020de:	331c      	adds	r3, #28
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <main+0xa9c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4619      	mov	r1, r3
 80020e8:	4a55      	ldr	r2, [pc, #340]	; (8002240 <main+0xaa0>)
 80020ea:	232c      	movs	r3, #44	; 0x2c
 80020ec:	fb03 f301 	mul.w	r3, r3, r1
 80020f0:	4413      	add	r3, r2
 80020f2:	3328      	adds	r3, #40	; 0x28
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fc26 	bl	8000948 <__aeabi_fsub>
 80020fc:	4603      	mov	r3, r0
 80020fe:	495c      	ldr	r1, [pc, #368]	; (8002270 <main+0xad0>)
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fd2b 	bl	8000b5c <__aeabi_fmul>
 8002106:	4603      	mov	r3, r0
 8002108:	495b      	ldr	r1, [pc, #364]	; (8002278 <main+0xad8>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fc1c 	bl	8000948 <__aeabi_fsub>
 8002110:	4603      	mov	r3, r0
        HAL_Delay(
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fee8 	bl	8000ee8 <__aeabi_f2uiz>
 8002118:	4603      	mov	r3, r0
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f862 	bl	80031e4 <HAL_Delay>
        for (i = 3000; i >= 0; i--)
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <main+0xac4>)
 8002122:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e010      	b.n	800214c <main+0x9ac>
        { //Desliga gradualmete o bomba
          dutyCycle_TIM1_CH4 = i;
 800212a:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <main+0xac4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <main+0xac8>)
 8002132:	601a      	str	r2, [r3, #0]
          TIM1->CCR4 = dutyCycle_TIM1_CH4;
 8002134:	4a4d      	ldr	r2, [pc, #308]	; (800226c <main+0xacc>)
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <main+0xac8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
          HAL_Delay(0.08);
 800213c:	2000      	movs	r0, #0
 800213e:	f001 f851 	bl	80031e4 <HAL_Delay>
        for (i = 3000; i >= 0; i--)
 8002142:	4b48      	ldr	r3, [pc, #288]	; (8002264 <main+0xac4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	4a46      	ldr	r2, [pc, #280]	; (8002264 <main+0xac4>)
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b45      	ldr	r3, [pc, #276]	; (8002264 <main+0xac4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	daea      	bge.n	800212a <main+0x98a>
 8002154:	e04f      	b.n	80021f6 <main+0xa56>
        }
      }
      else
      {
        for (i = 0; i <= 3000; i++)
 8002156:	4b43      	ldr	r3, [pc, #268]	; (8002264 <main+0xac4>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e010      	b.n	8002180 <main+0x9e0>
        { //Liga gradualmente a bomba
          dutyCycle_TIM1_CH4 = i;
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <main+0xac4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <main+0xac8>)
 8002166:	601a      	str	r2, [r3, #0]
          TIM1->CCR4 = dutyCycle_TIM1_CH4;
 8002168:	4a40      	ldr	r2, [pc, #256]	; (800226c <main+0xacc>)
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <main+0xac8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6413      	str	r3, [r2, #64]	; 0x40
          HAL_Delay(0.06);
 8002170:	2000      	movs	r0, #0
 8002172:	f001 f837 	bl	80031e4 <HAL_Delay>
        for (i = 0; i <= 3000; i++)
 8002176:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <main+0xac4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a39      	ldr	r2, [pc, #228]	; (8002264 <main+0xac4>)
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b38      	ldr	r3, [pc, #224]	; (8002264 <main+0xac4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002188:	4293      	cmp	r3, r2
 800218a:	dde8      	ble.n	800215e <main+0x9be>
        }
        HAL_Delay(((capsulas[Bn1].tempo_agua) * 1000) - 550);
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <main+0xa9c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <main+0xaa0>)
 8002194:	232c      	movs	r3, #44	; 0x2c
 8002196:	fb03 f301 	mul.w	r3, r3, r1
 800219a:	4413      	add	r3, r2
 800219c:	331c      	adds	r3, #28
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4933      	ldr	r1, [pc, #204]	; (8002270 <main+0xad0>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fcda 	bl	8000b5c <__aeabi_fmul>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4934      	ldr	r1, [pc, #208]	; (800227c <main+0xadc>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fbcb 	bl	8000948 <__aeabi_fsub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fe97 	bl	8000ee8 <__aeabi_f2uiz>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 f811 	bl	80031e4 <HAL_Delay>

        for (i = 3000; i >= 0; i--)
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <main+0xac4>)
 80021c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e010      	b.n	80021ee <main+0xa4e>

        { //Desliga gradualmete o bomba
          dutyCycle_TIM1_CH4 = i;
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <main+0xac4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <main+0xac8>)
 80021d4:	601a      	str	r2, [r3, #0]
          TIM1->CCR4 = dutyCycle_TIM1_CH4;
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <main+0xacc>)
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <main+0xac8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
          HAL_Delay(0.08);
 80021de:	2000      	movs	r0, #0
 80021e0:	f001 f800 	bl	80031e4 <HAL_Delay>
        for (i = 3000; i >= 0; i--)
 80021e4:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <main+0xac4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <main+0xac4>)
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <main+0xac4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	daea      	bge.n	80021cc <main+0xa2c>
        }
      }
      HAL_GPIO_WritePin(GPIOB, Y1, GPIO_PIN_RESET); //Fecha valvula de água quente
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <main+0xae0>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	4619      	mov	r1, r3
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <main+0xab0>)
 8002202:	f002 f8cc 	bl	800439e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, Y2, GPIO_PIN_RESET); //Fecha valvula de água gelada
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <main+0xae4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	2200      	movs	r2, #0
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	; (8002250 <main+0xab0>)
 8002212:	f002 f8c4 	bl	800439e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, Y3, GPIO_PIN_RESET); //Fecha valvula de água natural
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <main+0xaac>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <main+0xab0>)
 8002222:	f002 f8bc 	bl	800439e <HAL_GPIO_WritePin>
      tela = 5;                                     //Avança para o próximo estado
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <main+0xab4>)
 8002228:	2205      	movs	r2, #5
 800222a:	701a      	strb	r2, [r3, #0]

      break;
 800222c:	e166      	b.n	80024fc <main+0xd5c>
 800222e:	bf00      	nop
 8002230:	20000378 	.word	0x20000378
 8002234:	51eb851f 	.word	0x51eb851f
 8002238:	20000464 	.word	0x20000464
 800223c:	200003d4 	.word	0x200003d4
 8002240:	20000210 	.word	0x20000210
 8002244:	08006180 	.word	0x08006180
 8002248:	08006188 	.word	0x08006188
 800224c:	20000206 	.word	0x20000206
 8002250:	40010c00 	.word	0x40010c00
 8002254:	2000045c 	.word	0x2000045c
 8002258:	0800619c 	.word	0x0800619c
 800225c:	080061a8 	.word	0x080061a8
 8002260:	20000207 	.word	0x20000207
 8002264:	20000460 	.word	0x20000460
 8002268:	20000384 	.word	0x20000384
 800226c:	40012c00 	.word	0x40012c00
 8002270:	447a0000 	.word	0x447a0000
 8002274:	43480000 	.word	0x43480000
 8002278:	437a0000 	.word	0x437a0000
 800227c:	44098000 	.word	0x44098000
 8002280:	20000204 	.word	0x20000204
 8002284:	20000205 	.word	0x20000205

    case 5: //Aviso para remoçâo de capsula usada
      LCD_Clear();
 8002288:	f7fe ff5e 	bl	8001148 <LCD_Clear>
      LCD_Set_Cursor(2, 0);
 800228c:	2100      	movs	r1, #0
 800228e:	2002      	movs	r0, #2
 8002290:	f7fe ff64 	bl	800115c <LCD_Set_Cursor>
      LCD_Write_String(" Remover capsula");
 8002294:	489a      	ldr	r0, [pc, #616]	; (8002500 <main+0xd60>)
 8002296:	f7ff f8ed 	bl	8001474 <LCD_Write_String>
      HAL_Delay(2000);
 800229a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800229e:	f000 ffa1 	bl	80031e4 <HAL_Delay>
      if (Bn1 == 0)
 80022a2:	4b98      	ldr	r3, [pc, #608]	; (8002504 <main+0xd64>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8124 	bne.w	80024f4 <main+0xd54>
      { //Se capsula removida

        LCD_Clear();
 80022ac:	f7fe ff4c 	bl	8001148 <LCD_Clear>
        tela = 0; //Retorna para o estado inicial
 80022b0:	4b95      	ldr	r3, [pc, #596]	; (8002508 <main+0xd68>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022b6:	e11d      	b.n	80024f4 <main+0xd54>

    case 10: //Seleção do tipo de água para a capsula de Agua

      if (strcmp(capsulas[Bn1].nome, "      Agua      ") != 0)
 80022b8:	4b92      	ldr	r3, [pc, #584]	; (8002504 <main+0xd64>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	232c      	movs	r3, #44	; 0x2c
 80022c0:	fb03 f302 	mul.w	r3, r3, r2
 80022c4:	4a91      	ldr	r2, [pc, #580]	; (800250c <main+0xd6c>)
 80022c6:	4413      	add	r3, r2
 80022c8:	4991      	ldr	r1, [pc, #580]	; (8002510 <main+0xd70>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ff40 	bl	8000150 <strcmp>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <main+0xb44>
      {           //Se o usuário retirar a capsula ou for uma capsula diferente
        tela = 0; //Retorna para o estado inicial
 80022d6:	4b8c      	ldr	r3, [pc, #560]	; (8002508 <main+0xd68>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
        selecao = -1;
 80022dc:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <main+0xd74>)
 80022de:	22ff      	movs	r2, #255	; 0xff
 80022e0:	701a      	strb	r2, [r3, #0]
        break;
 80022e2:	e10b      	b.n	80024fc <main+0xd5c>
      }
      //Incremento se os botões forem pressionados
      if (state_btn_mais)
 80022e4:	4b8c      	ldr	r3, [pc, #560]	; (8002518 <main+0xd78>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <main+0xb5e>
        selecao++;
 80022ec:	4b89      	ldr	r3, [pc, #548]	; (8002514 <main+0xd74>)
 80022ee:	f993 3000 	ldrsb.w	r3, [r3]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	4b86      	ldr	r3, [pc, #536]	; (8002514 <main+0xd74>)
 80022fc:	701a      	strb	r2, [r3, #0]
      if (state_btn_menos)
 80022fe:	4b87      	ldr	r3, [pc, #540]	; (800251c <main+0xd7c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <main+0xb78>
        selecao--;
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <main+0xd74>)
 8002308:	f993 3000 	ldrsb.w	r3, [r3]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	b25a      	sxtb	r2, r3
 8002314:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <main+0xd74>)
 8002316:	701a      	strb	r2, [r3, #0]

      //Se C presionado vai para o estado 1
      if (state_btn_c)
 8002318:	4b81      	ldr	r3, [pc, #516]	; (8002520 <main+0xd80>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <main+0xb96>
      {
    	 LCD_Clear();
 8002320:	f7fe ff12 	bl	8001148 <LCD_Clear>
        tela = 0;
 8002324:	4b78      	ldr	r3, [pc, #480]	; (8002508 <main+0xd68>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
        selecao = -1;
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <main+0xd74>)
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	701a      	strb	r2, [r3, #0]
        LCD_Clear();
 8002330:	f7fe ff0a 	bl	8001148 <LCD_Clear>
        break;
 8002334:	e0e2      	b.n	80024fc <main+0xd5c>
      }

      //Organiza a seleção de forma circular
      if (selecao == -1)
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <main+0xd74>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d102      	bne.n	8002348 <main+0xba8>
        selecao = 3;
 8002342:	4b74      	ldr	r3, [pc, #464]	; (8002514 <main+0xd74>)
 8002344:	2203      	movs	r2, #3
 8002346:	701a      	strb	r2, [r3, #0]
      if (selecao == 4)
 8002348:	4b72      	ldr	r3, [pc, #456]	; (8002514 <main+0xd74>)
 800234a:	f993 3000 	ldrsb.w	r3, [r3]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d102      	bne.n	8002358 <main+0xbb8>
        selecao = 0;
 8002352:	4b70      	ldr	r3, [pc, #448]	; (8002514 <main+0xd74>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]

      if (last_selecao != selecao)
 8002358:	4b72      	ldr	r3, [pc, #456]	; (8002524 <main+0xd84>)
 800235a:	f993 2000 	ldrsb.w	r2, [r3]
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <main+0xd74>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	429a      	cmp	r2, r3
 8002366:	d002      	beq.n	800236e <main+0xbce>
      {
        tela = 11;
 8002368:	4b67      	ldr	r3, [pc, #412]	; (8002508 <main+0xd68>)
 800236a:	220b      	movs	r2, #11
 800236c:	701a      	strb	r2, [r3, #0]
      }

      //Se S pressionado vai para o estado 1
      if (state_btn_s)
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <main+0xd88>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80c1 	beq.w	80024fa <main+0xd5a>
      {
        tela = 1;
 8002378:	4b63      	ldr	r3, [pc, #396]	; (8002508 <main+0xd68>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
      }

      break;
 800237e:	e0bc      	b.n	80024fa <main+0xd5a>

    case 11:

      //As opções
      if (selecao == 0)
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <main+0xd74>)
 8002382:	f993 3000 	ldrsb.w	r3, [r3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d136      	bne.n	80023f8 <main+0xc58>
      {
        LCD_Clear();
 800238a:	f7fe fedd 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(1, 1);
 800238e:	2101      	movs	r1, #1
 8002390:	2001      	movs	r0, #1
 8002392:	f7fe fee3 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(" Tipo Agua ");
 8002396:	4865      	ldr	r0, [pc, #404]	; (800252c <main+0xd8c>)
 8002398:	f7ff f86c 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 1);
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f7fe fedc 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("   Agua quente  ");
 80023a4:	4862      	ldr	r0, [pc, #392]	; (8002530 <main+0xd90>)
 80023a6:	f7ff f865 	bl	8001474 <LCD_Write_String>
        strcpy(capsulas[Bn1].tipo_agua, "quente");
 80023aa:	4b56      	ldr	r3, [pc, #344]	; (8002504 <main+0xd64>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	232c      	movs	r3, #44	; 0x2c
 80023b2:	fb03 f302 	mul.w	r3, r3, r2
 80023b6:	3310      	adds	r3, #16
 80023b8:	4a54      	ldr	r2, [pc, #336]	; (800250c <main+0xd6c>)
 80023ba:	4413      	add	r3, r2
 80023bc:	3301      	adds	r3, #1
 80023be:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <main+0xd94>)
 80023c0:	6810      	ldr	r0, [r2, #0]
 80023c2:	6018      	str	r0, [r3, #0]
 80023c4:	8891      	ldrh	r1, [r2, #4]
 80023c6:	7992      	ldrb	r2, [r2, #6]
 80023c8:	8099      	strh	r1, [r3, #4]
 80023ca:	719a      	strb	r2, [r3, #6]
        capsulas[Bn1].temperatura_agua = 80;
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <main+0xd64>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4a4e      	ldr	r2, [pc, #312]	; (800250c <main+0xd6c>)
 80023d4:	232c      	movs	r3, #44	; 0x2c
 80023d6:	fb03 f301 	mul.w	r3, r3, r1
 80023da:	4413      	add	r3, r2
 80023dc:	3320      	adds	r3, #32
 80023de:	4a56      	ldr	r2, [pc, #344]	; (8002538 <main+0xd98>)
 80023e0:	601a      	str	r2, [r3, #0]
        capsulas[Bn1].tempo_agua = 3;
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <main+0xd64>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4a48      	ldr	r2, [pc, #288]	; (800250c <main+0xd6c>)
 80023ea:	232c      	movs	r3, #44	; 0x2c
 80023ec:	fb03 f301 	mul.w	r3, r3, r1
 80023f0:	4413      	add	r3, r2
 80023f2:	331c      	adds	r3, #28
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <main+0xd9c>)
 80023f6:	601a      	str	r2, [r3, #0]
      }
      if (selecao == 1)
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <main+0xd74>)
 80023fa:	f993 3000 	ldrsb.w	r3, [r3]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d136      	bne.n	8002470 <main+0xcd0>
      {
        LCD_Clear();
 8002402:	f7fe fea1 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(1, 1);
 8002406:	2101      	movs	r1, #1
 8002408:	2001      	movs	r0, #1
 800240a:	f7fe fea7 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(" Tipo Agua ");
 800240e:	4847      	ldr	r0, [pc, #284]	; (800252c <main+0xd8c>)
 8002410:	f7ff f830 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 1);
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f7fe fea0 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("   Agua gelada  ");
 800241c:	4848      	ldr	r0, [pc, #288]	; (8002540 <main+0xda0>)
 800241e:	f7ff f829 	bl	8001474 <LCD_Write_String>
        strcpy(capsulas[Bn1].tipo_agua, "gelada");
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <main+0xd64>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	232c      	movs	r3, #44	; 0x2c
 800242a:	fb03 f302 	mul.w	r3, r3, r2
 800242e:	3310      	adds	r3, #16
 8002430:	4a36      	ldr	r2, [pc, #216]	; (800250c <main+0xd6c>)
 8002432:	4413      	add	r3, r2
 8002434:	3301      	adds	r3, #1
 8002436:	4a43      	ldr	r2, [pc, #268]	; (8002544 <main+0xda4>)
 8002438:	6810      	ldr	r0, [r2, #0]
 800243a:	6018      	str	r0, [r3, #0]
 800243c:	8891      	ldrh	r1, [r2, #4]
 800243e:	7992      	ldrb	r2, [r2, #6]
 8002440:	8099      	strh	r1, [r3, #4]
 8002442:	719a      	strb	r2, [r3, #6]
        capsulas[Bn1].temperatura_agua = 10;
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <main+0xd64>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	4a30      	ldr	r2, [pc, #192]	; (800250c <main+0xd6c>)
 800244c:	232c      	movs	r3, #44	; 0x2c
 800244e:	fb03 f301 	mul.w	r3, r3, r1
 8002452:	4413      	add	r3, r2
 8002454:	3320      	adds	r3, #32
 8002456:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <main+0xda8>)
 8002458:	601a      	str	r2, [r3, #0]
        capsulas[Bn1].tempo_agua = 3;
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <main+0xd64>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4a2a      	ldr	r2, [pc, #168]	; (800250c <main+0xd6c>)
 8002462:	232c      	movs	r3, #44	; 0x2c
 8002464:	fb03 f301 	mul.w	r3, r3, r1
 8002468:	4413      	add	r3, r2
 800246a:	331c      	adds	r3, #28
 800246c:	4a33      	ldr	r2, [pc, #204]	; (800253c <main+0xd9c>)
 800246e:	601a      	str	r2, [r3, #0]
      }
      if (selecao == 3)
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <main+0xd74>)
 8002472:	f993 3000 	ldrsb.w	r3, [r3]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d12a      	bne.n	80024d0 <main+0xd30>
      {
        LCD_Clear();
 800247a:	f7fe fe65 	bl	8001148 <LCD_Clear>
        LCD_Set_Cursor(1, 1);
 800247e:	2101      	movs	r1, #1
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe fe6b 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(" Tipo Agua ");
 8002486:	4829      	ldr	r0, [pc, #164]	; (800252c <main+0xd8c>)
 8002488:	f7fe fff4 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 1);
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f7fe fe64 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("   Agua natural  ");
 8002494:	482d      	ldr	r0, [pc, #180]	; (800254c <main+0xdac>)
 8002496:	f7fe ffed 	bl	8001474 <LCD_Write_String>
        strcpy(capsulas[Bn1].tipo_agua, "natural");
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <main+0xd64>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	232c      	movs	r3, #44	; 0x2c
 80024a2:	fb03 f302 	mul.w	r3, r3, r2
 80024a6:	3310      	adds	r3, #16
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <main+0xd6c>)
 80024aa:	4413      	add	r3, r2
 80024ac:	3301      	adds	r3, #1
 80024ae:	4928      	ldr	r1, [pc, #160]	; (8002550 <main+0xdb0>)
 80024b0:	461a      	mov	r2, r3
 80024b2:	460b      	mov	r3, r1
 80024b4:	cb03      	ldmia	r3!, {r0, r1}
 80024b6:	6010      	str	r0, [r2, #0]
 80024b8:	6051      	str	r1, [r2, #4]
        capsulas[Bn1].tempo_agua = 3;
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <main+0xd64>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <main+0xd6c>)
 80024c2:	232c      	movs	r3, #44	; 0x2c
 80024c4:	fb03 f301 	mul.w	r3, r3, r1
 80024c8:	4413      	add	r3, r2
 80024ca:	331c      	adds	r3, #28
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <main+0xd9c>)
 80024ce:	601a      	str	r2, [r3, #0]
      }

      last_selecao = selecao;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <main+0xd74>)
 80024d2:	f993 2000 	ldrsb.w	r2, [r3]
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <main+0xd84>)
 80024d8:	701a      	strb	r2, [r3, #0]
      tela = 10;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <main+0xd68>)
 80024dc:	220a      	movs	r2, #10
 80024de:	701a      	strb	r2, [r3, #0]

      break;
 80024e0:	e00c      	b.n	80024fc <main+0xd5c>
      break;
 80024e2:	bf00      	nop
 80024e4:	f7ff b9c0 	b.w	8001868 <main+0xc8>
      break;
 80024e8:	bf00      	nop
 80024ea:	f7ff b9bd 	b.w	8001868 <main+0xc8>
      break;
 80024ee:	bf00      	nop
 80024f0:	f7ff b9ba 	b.w	8001868 <main+0xc8>
      break;
 80024f4:	bf00      	nop
 80024f6:	f7ff b9b7 	b.w	8001868 <main+0xc8>
      break;
 80024fa:	bf00      	nop
    Bn1 = capsules_get_value(GPIOA, Bn1_bit0, Bn1_bit1, Bn1_bit2);
 80024fc:	f7ff b9b4 	b.w	8001868 <main+0xc8>
 8002500:	080061b0 	.word	0x080061b0
 8002504:	200003d4 	.word	0x200003d4
 8002508:	2000045c 	.word	0x2000045c
 800250c:	20000210 	.word	0x20000210
 8002510:	08006124 	.word	0x08006124
 8002514:	2000000a 	.word	0x2000000a
 8002518:	20000503 	.word	0x20000503
 800251c:	2000037a 	.word	0x2000037a
 8002520:	20000380 	.word	0x20000380
 8002524:	2000000b 	.word	0x2000000b
 8002528:	200003d5 	.word	0x200003d5
 800252c:	080061c4 	.word	0x080061c4
 8002530:	080061d0 	.word	0x080061d0
 8002534:	08006148 	.word	0x08006148
 8002538:	42a00000 	.word	0x42a00000
 800253c:	40400000 	.word	0x40400000
 8002540:	080061e4 	.word	0x080061e4
 8002544:	08006164 	.word	0x08006164
 8002548:	41200000 	.word	0x41200000
 800254c:	080061f8 	.word	0x080061f8
 8002550:	08006180 	.word	0x08006180

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b094      	sub	sp, #80	; 0x50
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255e:	2228      	movs	r2, #40	; 0x28
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fc5a 	bl	8005e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002584:	2302      	movs	r3, #2
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002588:	2301      	movs	r3, #1
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800258c:	2310      	movs	r3, #16
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002590:	2302      	movs	r3, #2
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002594:	2300      	movs	r3, #0
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002598:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a2:	4618      	mov	r0, r3
 80025a4:	f001 ff2c 	bl	8004400 <HAL_RCC_OscConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80025ae:	f000 fb67 	bl	8002c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025b2:	230f      	movs	r3, #15
 80025b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2102      	movs	r1, #2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 f996 	bl	8004900 <HAL_RCC_ClockConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80025da:	f000 fb51 	bl	8002c80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025de:	2302      	movs	r3, #2
 80025e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80025e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fb10 	bl	8004c10 <HAL_RCCEx_PeriphCLKConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80025f6:	f000 fb43 	bl	8002c80 <Error_Handler>
  }
}
 80025fa:	bf00      	nop
 80025fc:	3750      	adds	r7, #80	; 0x50
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002614:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <MX_ADC1_Init+0x180>)
 8002616:	4a5c      	ldr	r2, [pc, #368]	; (8002788 <MX_ADC1_Init+0x184>)
 8002618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <MX_ADC1_Init+0x180>)
 800261c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002622:	4b58      	ldr	r3, [pc, #352]	; (8002784 <MX_ADC1_Init+0x180>)
 8002624:	2200      	movs	r2, #0
 8002626:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <MX_ADC1_Init+0x180>)
 800262a:	2200      	movs	r2, #0
 800262c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800262e:	4b55      	ldr	r3, [pc, #340]	; (8002784 <MX_ADC1_Init+0x180>)
 8002630:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <MX_ADC1_Init+0x180>)
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 12;
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <MX_ADC1_Init+0x180>)
 800263e:	220c      	movs	r2, #12
 8002640:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002642:	4850      	ldr	r0, [pc, #320]	; (8002784 <MX_ADC1_Init+0x180>)
 8002644:	f000 fdf0 	bl	8003228 <HAL_ADC_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800264e:	f000 fb17 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002652:	2304      	movs	r3, #4
 8002654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002656:	2301      	movs	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4848      	ldr	r0, [pc, #288]	; (8002784 <MX_ADC1_Init+0x180>)
 8002664:	f000 ffa8 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 fb07 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002672:	2302      	movs	r3, #2
 8002674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4842      	ldr	r0, [pc, #264]	; (8002784 <MX_ADC1_Init+0x180>)
 800267c:	f000 ff9c 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002686:	f000 fafb 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800268a:	2303      	movs	r3, #3
 800268c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	4619      	mov	r1, r3
 8002692:	483c      	ldr	r0, [pc, #240]	; (8002784 <MX_ADC1_Init+0x180>)
 8002694:	f000 ff90 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800269e:	f000 faef 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026a2:	2304      	movs	r3, #4
 80026a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4836      	ldr	r0, [pc, #216]	; (8002784 <MX_ADC1_Init+0x180>)
 80026ac:	f000 ff84 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80026b6:	f000 fae3 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80026ba:	2305      	movs	r3, #5
 80026bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4830      	ldr	r0, [pc, #192]	; (8002784 <MX_ADC1_Init+0x180>)
 80026c4:	f000 ff78 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80026ce:	f000 fad7 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80026d2:	2306      	movs	r3, #6
 80026d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	482a      	ldr	r0, [pc, #168]	; (8002784 <MX_ADC1_Init+0x180>)
 80026dc:	f000 ff6c 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80026e6:	f000 facb 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80026ea:	2307      	movs	r3, #7
 80026ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4824      	ldr	r0, [pc, #144]	; (8002784 <MX_ADC1_Init+0x180>)
 80026f4:	f000 ff60 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80026fe:	f000 fabf 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002702:	2308      	movs	r3, #8
 8002704:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4619      	mov	r1, r3
 800270a:	481e      	ldr	r0, [pc, #120]	; (8002784 <MX_ADC1_Init+0x180>)
 800270c:	f000 ff54 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002716:	f000 fab3 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800271a:	2309      	movs	r3, #9
 800271c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4818      	ldr	r0, [pc, #96]	; (8002784 <MX_ADC1_Init+0x180>)
 8002724:	f000 ff48 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800272e:	f000 faa7 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002732:	230a      	movs	r3, #10
 8002734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4812      	ldr	r0, [pc, #72]	; (8002784 <MX_ADC1_Init+0x180>)
 800273c:	f000 ff3c 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8002746:	f000 fa9b 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800274a:	230b      	movs	r3, #11
 800274c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	480c      	ldr	r0, [pc, #48]	; (8002784 <MX_ADC1_Init+0x180>)
 8002754:	f000 ff30 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800275e:	f000 fa8f 	bl	8002c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8002762:	230c      	movs	r3, #12
 8002764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <MX_ADC1_Init+0x180>)
 800276c:	f000 ff24 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 8002776:	f000 fa83 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000042c 	.word	0x2000042c
 8002788:	40012400 	.word	0x40012400

0800278c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08e      	sub	sp, #56	; 0x38
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027bc:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027c4:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000 - 1;
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027d2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80027d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027e4:	482e      	ldr	r0, [pc, #184]	; (80028a0 <MX_TIM2_Init+0x114>)
 80027e6:	f002 fb85 	bl	8004ef4 <HAL_TIM_Base_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80027f0:	f000 fa46 	bl	8002c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027fe:	4619      	mov	r1, r3
 8002800:	4827      	ldr	r0, [pc, #156]	; (80028a0 <MX_TIM2_Init+0x114>)
 8002802:	f002 fed9 	bl	80055b8 <HAL_TIM_ConfigClockSource>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800280c:	f000 fa38 	bl	8002c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002810:	4823      	ldr	r0, [pc, #140]	; (80028a0 <MX_TIM2_Init+0x114>)
 8002812:	f002 fc11 	bl	8005038 <HAL_TIM_PWM_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800281c:	f000 fa30 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002828:	f107 0320 	add.w	r3, r7, #32
 800282c:	4619      	mov	r1, r3
 800282e:	481c      	ldr	r0, [pc, #112]	; (80028a0 <MX_TIM2_Init+0x114>)
 8002830:	f003 fa42 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800283a:	f000 fa21 	bl	8002c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283e:	2360      	movs	r3, #96	; 0x60
 8002840:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	2200      	movs	r2, #0
 8002852:	4619      	mov	r1, r3
 8002854:	4812      	ldr	r0, [pc, #72]	; (80028a0 <MX_TIM2_Init+0x114>)
 8002856:	f002 fdf1 	bl	800543c <HAL_TIM_PWM_ConfigChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002860:	f000 fa0e 	bl	8002c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2204      	movs	r2, #4
 8002868:	4619      	mov	r1, r3
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <MX_TIM2_Init+0x114>)
 800286c:	f002 fde6 	bl	800543c <HAL_TIM_PWM_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002876:	f000 fa03 	bl	8002c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	2208      	movs	r2, #8
 800287e:	4619      	mov	r1, r3
 8002880:	4807      	ldr	r0, [pc, #28]	; (80028a0 <MX_TIM2_Init+0x114>)
 8002882:	f002 fddb 	bl	800543c <HAL_TIM_PWM_ConfigChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800288c:	f000 f9f8 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002890:	4803      	ldr	r0, [pc, #12]	; (80028a0 <MX_TIM2_Init+0x114>)
 8002892:	f000 fba1 	bl	8002fd8 <HAL_TIM_MspPostInit>
}
 8002896:	bf00      	nop
 8002898:	3738      	adds	r7, #56	; 0x38
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200004b8 	.word	0x200004b8

080028a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	463b      	mov	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <MX_TIM3_Init+0x94>)
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <MX_TIM3_Init+0x98>)
 80028c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7201;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <MX_TIM3_Init+0x94>)
 80028c8:	f641 4221 	movw	r2, #7201	; 0x1c21
 80028cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <MX_TIM3_Init+0x94>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3334;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <MX_TIM3_Init+0x94>)
 80028d6:	f640 5206 	movw	r2, #3334	; 0xd06
 80028da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <MX_TIM3_Init+0x94>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_TIM3_Init+0x94>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <MX_TIM3_Init+0x94>)
 80028ea:	f002 fb03 	bl	8004ef4 <HAL_TIM_Base_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028f4:	f000 f9c4 	bl	8002c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	4619      	mov	r1, r3
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <MX_TIM3_Init+0x94>)
 8002906:	f002 fe57 	bl	80055b8 <HAL_TIM_ConfigClockSource>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002910:	f000 f9b6 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800291c:	463b      	mov	r3, r7
 800291e:	4619      	mov	r1, r3
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_TIM3_Init+0x94>)
 8002922:	f003 f9c9 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800292c:	f000 f9a8 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200003dc 	.word	0x200003dc
 800293c:	40000400 	.word	0x40000400

08002940 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002954:	463b      	mov	r3, r7
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <MX_TIM4_Init+0x94>)
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <MX_TIM4_Init+0x98>)
 8002960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7201;
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002964:	f641 4221 	movw	r2, #7201	; 0x1c21
 8002968:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_TIM4_Init+0x94>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10001;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002972:	f242 7211 	movw	r2, #10001	; 0x2711
 8002976:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_TIM4_Init+0x94>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002984:	4813      	ldr	r0, [pc, #76]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002986:	f002 fab5 	bl	8004ef4 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002990:	f000 f976 	bl	8002c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	4619      	mov	r1, r3
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <MX_TIM4_Init+0x94>)
 80029a2:	f002 fe09 	bl	80055b8 <HAL_TIM_ConfigClockSource>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80029ac:	f000 f968 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029b8:	463b      	mov	r3, r7
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_TIM4_Init+0x94>)
 80029be:	f003 f97b 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80029c8:	f000 f95a 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000388 	.word	0x20000388
 80029d8:	40000800 	.word	0x40000800

080029dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_DMA_Init+0x38>)
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <MX_DMA_Init+0x38>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6153      	str	r3, [r2, #20]
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_DMA_Init+0x38>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	200b      	movs	r0, #11
 8002a00:	f001 f937 	bl	8003c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a04:	200b      	movs	r0, #11
 8002a06:	f001 f950 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a4a:	f043 0320 	orr.w	r3, r3, #32
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a3b      	ldr	r2, [pc, #236]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4a35      	ldr	r2, [pc, #212]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6193      	str	r3, [r2, #24]
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <MX_GPIO_Init+0x138>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heart_Beat_GPIO_Port, Heart_Beat_Pin, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a92:	4830      	ldr	r0, [pc, #192]	; (8002b54 <MX_GPIO_Init+0x13c>)
 8002a94:	f001 fc83 	bl	800439e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y1___V_lvula_de_para_alimenta__o_de__gua_quente_Pin | Y2___V_lvula_de_para_alimenta__o_de__gua_gelada_Pin | Y3___V_lvula_de_para_alimenta__o_de__gua_natural_Pin | Y4___V_lvula_de_para_alimenta__o_de_CO2_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002a9e:	482e      	ldr	r0, [pc, #184]	; (8002b58 <MX_GPIO_Init+0x140>)
 8002aa0:	f001 fc7d 	bl	800439e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Heart_Beat_Pin */
  GPIO_InitStruct.Pin = Heart_Beat_Pin;
 8002aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Heart_Beat_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4619      	mov	r1, r3
 8002abc:	4825      	ldr	r0, [pc, #148]	; (8002b54 <MX_GPIO_Init+0x13c>)
 8002abe:	f001 fafd 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Select_Pin Button_Cancel_Pin */
  GPIO_InitStruct.Pin = Button_Select_Pin | Button_Cancel_Pin;
 8002ac2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	481f      	ldr	r0, [pc, #124]	; (8002b54 <MX_GPIO_Init+0x13c>)
 8002ad8:	f001 faf0 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Y1___V_lvula_de_para_alimenta__o_de__gua_quente_Pin Y2___V_lvula_de_para_alimenta__o_de__gua_gelada_Pin Y3___V_lvula_de_para_alimenta__o_de__gua_natural_Pin Y4___V_lvula_de_para_alimenta__o_de_CO2_Pin */
  GPIO_InitStruct.Pin = Y1___V_lvula_de_para_alimenta__o_de__gua_quente_Pin | Y2___V_lvula_de_para_alimenta__o_de__gua_gelada_Pin | Y3___V_lvula_de_para_alimenta__o_de__gua_natural_Pin | Y4___V_lvula_de_para_alimenta__o_de_CO2_Pin;
 8002adc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4619      	mov	r1, r3
 8002af4:	4818      	ldr	r0, [pc, #96]	; (8002b58 <MX_GPIO_Init+0x140>)
 8002af6:	f001 fae1 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button___Pin Button__A9_Pin */
  GPIO_InitStruct.Pin = Button___Pin | Button__A9_Pin;
 8002afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4813      	ldr	r0, [pc, #76]	; (8002b5c <MX_GPIO_Init+0x144>)
 8002b10:	f001 fad4 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BN1__Leitor__ptico_para_detec__o_do_tipo_de_c_psula___bit0_Pin BN1__Leitor__ptico_para_detec__o_do_tipo_de_c_psula___bit1_Pin BN1__Leitor__ptico_para_detec__o_do_tipo_de_c_psula___bit2_Pin */
  GPIO_InitStruct.Pin = BN1__Leitor__ptico_para_detec__o_do_tipo_de_c_psula___bit0_Pin | BN1__Leitor__ptico_para_detec__o_do_tipo_de_c_psula___bit1_Pin | BN1__Leitor__ptico_para_detec__o_do_tipo_de_c_psula___bit2_Pin;
 8002b14:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8002b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	4619      	mov	r1, r3
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <MX_GPIO_Init+0x144>)
 8002b2a:	f001 fac7 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : P1___Pressostato_de_filtro_de__gua_saturado__contato_NF__abre_se_filtro_saturado_Pin P2___Pressostato_de_cilindro_de_CO2_vazio__contato_NF__abre_se_cilindro_vazio_Pin */
  GPIO_InitStruct.Pin = P1___Pressostato_de_filtro_de__gua_saturado__contato_NF__abre_se_filtro_saturado_Pin | P2___Pressostato_de_cilindro_de_CO2_vazio__contato_NF__abre_se_cilindro_vazio_Pin;
 8002b2e:	2318      	movs	r3, #24
 8002b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_GPIO_Init+0x140>)
 8002b42:	f001 fabb 	bl	80040bc <HAL_GPIO_Init>
}
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40011000 	.word	0x40011000
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40010800 	.word	0x40010800

08002b60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Função para as inperrupções dos timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  //Verifica qual time gerou a interrupção
  if (htim == &htim3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a2f      	ldr	r2, [pc, #188]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d12c      	bne.n	8002bca <HAL_TIM_PeriodElapsedCallback+0x6a>
  {

    /////Leitura botões//////
    state_btn_c = HAL_GPIO_ReadPin(GPIOC, btn_c);
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	482e      	ldr	r0, [pc, #184]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002b78:	f001 fbfa 	bl	8004370 <HAL_GPIO_ReadPin>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002b82:	701a      	strb	r2, [r3, #0]
    state_btn_mais = HAL_GPIO_ReadPin(GPIOA, btn_mais);
 8002b84:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	482c      	ldr	r0, [pc, #176]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002b8c:	f001 fbf0 	bl	8004370 <HAL_GPIO_ReadPin>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002b96:	701a      	strb	r2, [r3, #0]
    state_btn_menos = HAL_GPIO_ReadPin(GPIOA, btn_menos);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4827      	ldr	r0, [pc, #156]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002ba0:	f001 fbe6 	bl	8004370 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002baa:	701a      	strb	r2, [r3, #0]
    state_btn_s = HAL_GPIO_ReadPin(GPIOC, btn_s);
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	481f      	ldr	r0, [pc, #124]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002bb4:	f001 fbdc 	bl	8004370 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002bbe:	701a      	strb	r2, [r3, #0]

    //////Led para mostar que o sistemas esta funcionando////
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc4:	481a      	ldr	r0, [pc, #104]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002bc6:	f001 fc02 	bl	80043ce <HAL_GPIO_TogglePin>
  }
  if (htim == &htim4)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d126      	bne.n	8002c20 <HAL_TIM_PeriodElapsedCallback+0xc0>
  {
    //Contado para o funcionamento do relógio
    segundos++;
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002bdc:	801a      	strh	r2, [r3, #0]
    if (segundos == 60)
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	2b3c      	cmp	r3, #60	; 0x3c
 8002be4:	d108      	bne.n	8002bf8 <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      segundos = 0;
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
      minutos++;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002bf6:	801a      	strh	r2, [r3, #0]
    }
    if (minutos == 60)
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	2b3c      	cmp	r3, #60	; 0x3c
 8002bfe:	d108      	bne.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0xb2>
    {
      horas++;
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002c0a:	801a      	strh	r2, [r3, #0]
      minutos = 0;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	801a      	strh	r2, [r3, #0]
    }
    if (horas == 24)
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	2b18      	cmp	r3, #24
 8002c18:	d102      	bne.n	8002c20 <HAL_TIM_PeriodElapsedCallback+0xc0>
    {
      horas = 0;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200003dc 	.word	0x200003dc
 8002c2c:	20000002 	.word	0x20000002
 8002c30:	40011000 	.word	0x40011000
 8002c34:	20000380 	.word	0x20000380
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	40010800 	.word	0x40010800
 8002c40:	20000503 	.word	0x20000503
 8002c44:	20000006 	.word	0x20000006
 8002c48:	2000037a 	.word	0x2000037a
 8002c4c:	20000008 	.word	0x20000008
 8002c50:	200003d5 	.word	0x200003d5
 8002c54:	20000388 	.word	0x20000388
 8002c58:	20000426 	.word	0x20000426
 8002c5c:	20000504 	.word	0x20000504
 8002c60:	20000374 	.word	0x20000374

08002c64 <HAL_ADC_ConvHalfCpltCallback>:

//Função do DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  adcDataReady = 1;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000502 	.word	0x20000502

08002c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <atualiza_hora>:

#include "relogio.h"


void atualiza_hora(uint16_t horas, uint16_t minutos, uint16_t segundos)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
 8002c96:	460b      	mov	r3, r1
 8002c98:	80bb      	strh	r3, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	807b      	strh	r3, [r7, #2]
    //Mostra a hora
    LCD_Set_Cursor(2, 1);
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f7fe fa5b 	bl	800115c <LCD_Set_Cursor>
    LCD_Write_String("    ");
 8002ca6:	4852      	ldr	r0, [pc, #328]	; (8002df0 <atualiza_hora+0x164>)
 8002ca8:	f7fe fbe4 	bl	8001474 <LCD_Write_String>
    char buffer[2];
    if (horas < 10)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	2b09      	cmp	r3, #9
 8002cb0:	d81e      	bhi.n	8002cf0 <atualiza_hora+0x64>
    {
        LCD_Set_Cursor(2, 2);
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7fe fa51 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("0");
 8002cba:	484e      	ldr	r0, [pc, #312]	; (8002df4 <atualiza_hora+0x168>)
 8002cbc:	f7fe fbda 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 3);
 8002cc0:	2103      	movs	r1, #3
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f7fe fa4a 	bl	800115c <LCD_Set_Cursor>
        itoa(horas, buffer, 10);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	f107 010c 	add.w	r1, r7, #12
 8002cce:	220a      	movs	r2, #10
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f8a1 	bl	8005e18 <itoa>
        LCD_Write_String(buffer);
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fbca 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 4);
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f7fe fa3a 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(":");
 8002ce8:	4843      	ldr	r0, [pc, #268]	; (8002df8 <atualiza_hora+0x16c>)
 8002cea:	f7fe fbc3 	bl	8001474 <LCD_Write_String>
 8002cee:	e016      	b.n	8002d1e <atualiza_hora+0x92>
    }
    else
    {
        LCD_Set_Cursor(2, 2);
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f7fe fa32 	bl	800115c <LCD_Set_Cursor>
        itoa(horas, buffer, 10);
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	f107 010c 	add.w	r1, r7, #12
 8002cfe:	220a      	movs	r2, #10
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 f889 	bl	8005e18 <itoa>
        LCD_Write_String(buffer);
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fbb2 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 4);
 8002d10:	2104      	movs	r1, #4
 8002d12:	2002      	movs	r0, #2
 8002d14:	f7fe fa22 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(":");
 8002d18:	4837      	ldr	r0, [pc, #220]	; (8002df8 <atualiza_hora+0x16c>)
 8002d1a:	f7fe fbab 	bl	8001474 <LCD_Write_String>
    }
    if (minutos < 10)
 8002d1e:	88bb      	ldrh	r3, [r7, #4]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d81e      	bhi.n	8002d62 <atualiza_hora+0xd6>
    {
        LCD_Set_Cursor(2, 5);
 8002d24:	2105      	movs	r1, #5
 8002d26:	2002      	movs	r0, #2
 8002d28:	f7fe fa18 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("0");
 8002d2c:	4831      	ldr	r0, [pc, #196]	; (8002df4 <atualiza_hora+0x168>)
 8002d2e:	f7fe fba1 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 6);
 8002d32:	2106      	movs	r1, #6
 8002d34:	2002      	movs	r0, #2
 8002d36:	f7fe fa11 	bl	800115c <LCD_Set_Cursor>
        itoa(minutos, buffer, 10);
 8002d3a:	88bb      	ldrh	r3, [r7, #4]
 8002d3c:	f107 010c 	add.w	r1, r7, #12
 8002d40:	220a      	movs	r2, #10
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 f868 	bl	8005e18 <itoa>
        LCD_Write_String(buffer);
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fb91 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 7);
 8002d52:	2107      	movs	r1, #7
 8002d54:	2002      	movs	r0, #2
 8002d56:	f7fe fa01 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(":");
 8002d5a:	4827      	ldr	r0, [pc, #156]	; (8002df8 <atualiza_hora+0x16c>)
 8002d5c:	f7fe fb8a 	bl	8001474 <LCD_Write_String>
 8002d60:	e016      	b.n	8002d90 <atualiza_hora+0x104>
    }
    else
    {
        LCD_Set_Cursor(2, 5);
 8002d62:	2105      	movs	r1, #5
 8002d64:	2002      	movs	r0, #2
 8002d66:	f7fe f9f9 	bl	800115c <LCD_Set_Cursor>
        itoa(minutos, buffer, 10);
 8002d6a:	88bb      	ldrh	r3, [r7, #4]
 8002d6c:	f107 010c 	add.w	r1, r7, #12
 8002d70:	220a      	movs	r2, #10
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 f850 	bl	8005e18 <itoa>
        LCD_Write_String(buffer);
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fb79 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 7);
 8002d82:	2107      	movs	r1, #7
 8002d84:	2002      	movs	r0, #2
 8002d86:	f7fe f9e9 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String(":");
 8002d8a:	481b      	ldr	r0, [pc, #108]	; (8002df8 <atualiza_hora+0x16c>)
 8002d8c:	f7fe fb72 	bl	8001474 <LCD_Write_String>
    }
    if (segundos < 10) {
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	2b09      	cmp	r3, #9
 8002d94:	d817      	bhi.n	8002dc6 <atualiza_hora+0x13a>
        LCD_Set_Cursor(2, 8);
 8002d96:	2108      	movs	r1, #8
 8002d98:	2002      	movs	r0, #2
 8002d9a:	f7fe f9df 	bl	800115c <LCD_Set_Cursor>
        LCD_Write_String("0");
 8002d9e:	4815      	ldr	r0, [pc, #84]	; (8002df4 <atualiza_hora+0x168>)
 8002da0:	f7fe fb68 	bl	8001474 <LCD_Write_String>
        LCD_Set_Cursor(2, 9);
 8002da4:	2109      	movs	r1, #9
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fe f9d8 	bl	800115c <LCD_Set_Cursor>
        itoa(segundos, buffer, 10);
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	f107 010c 	add.w	r1, r7, #12
 8002db2:	220a      	movs	r2, #10
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 f82f 	bl	8005e18 <itoa>
        LCD_Write_String(buffer);
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fb58 	bl	8001474 <LCD_Write_String>
    {
        LCD_Set_Cursor(2, 8);
        itoa(segundos, buffer, 10);
        LCD_Write_String(buffer);
    }
}
 8002dc4:	e00f      	b.n	8002de6 <atualiza_hora+0x15a>
        LCD_Set_Cursor(2, 8);
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f7fe f9c7 	bl	800115c <LCD_Set_Cursor>
        itoa(segundos, buffer, 10);
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	f107 010c 	add.w	r1, r7, #12
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 f81e 	bl	8005e18 <itoa>
        LCD_Write_String(buffer);
 8002ddc:	f107 030c 	add.w	r3, r7, #12
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fb47 	bl	8001474 <LCD_Write_String>
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	0800620c 	.word	0x0800620c
 8002df4:	08006214 	.word	0x08006214
 8002df8:	08006218 	.word	0x08006218

08002dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_MspInit+0x5c>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <HAL_MspInit+0x5c>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6193      	str	r3, [r2, #24]
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_MspInit+0x5c>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_MspInit+0x5c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <HAL_MspInit+0x5c>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_MspInit+0x5c>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_MspInit+0x60>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_MspInit+0x60>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40010000 	.word	0x40010000

08002e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <HAL_ADC_MspInit+0xbc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d149      	bne.n	8002f14 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_ADC_MspInit+0xc0>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_ADC_MspInit+0xc0>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_ADC_MspInit+0xc0>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_ADC_MspInit+0xc0>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <HAL_ADC_MspInit+0xc0>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6193      	str	r3, [r2, #24]
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_ADC_MspInit+0xc0>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC1IN4___T1___Sensor_de_temperatura_anal_gico__5__100_C_Pin|ADC1IN5___T2___Sensor_de_temperatura_anal_gico__5__50_C_Pin;
 8002eb0:	2330      	movs	r3, #48	; 0x30
 8002eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4819      	ldr	r0, [pc, #100]	; (8002f24 <HAL_ADC_MspInit+0xc4>)
 8002ec0:	f001 f8fc 	bl	80040bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_ADC_MspInit+0xcc>)
 8002ec8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002eee:	2220      	movs	r2, #32
 8002ef0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ef8:	480b      	ldr	r0, [pc, #44]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002efa:	f000 fef1 	bl	8003ce0 <HAL_DMA_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002f04:	f7ff febc 	bl	8002c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002f0c:	621a      	str	r2, [r3, #32]
 8002f0e:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <HAL_ADC_MspInit+0xc8>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f14:	bf00      	nop
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40012400 	.word	0x40012400
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	2000046c 	.word	0x2000046c
 8002f2c:	40020008 	.word	0x40020008

08002f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d10c      	bne.n	8002f5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f5a:	e032      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_TIM_Base_MspInit+0xa0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d114      	bne.n	8002f90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	61d3      	str	r3, [r2, #28]
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	201d      	movs	r0, #29
 8002f84:	f000 fe75 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f88:	201d      	movs	r0, #29
 8002f8a:	f000 fe8e 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8002f8e:	e018      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d113      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_TIM_Base_MspInit+0x9c>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	201e      	movs	r0, #30
 8002fb8:	f000 fe5b 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fbc:	201e      	movs	r0, #30
 8002fbe:	f000 fe74 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800

08002fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff6:	d117      	bne.n	8003028 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_TIM_MspPostInit+0x58>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_TIM_MspPostInit+0x58>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_TIM_MspPostInit+0x58>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Timer2CH1___R1___Aquecimento_resistivo__sa_da_PWM_Pin|Timer2CH2___CP1___Compressor_de_refrigera__o__sa_da_PWM_Pin|Timer2CH3___B1___Bomba_de_alimenta__o_de__gua__sa_da_PWM_Pin;
 8003010:	2307      	movs	r3, #7
 8003012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2302      	movs	r3, #2
 800301a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	4804      	ldr	r0, [pc, #16]	; (8003034 <HAL_TIM_MspPostInit+0x5c>)
 8003024:	f001 f84a 	bl	80040bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003028:	bf00      	nop
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	40010800 	.word	0x40010800

08003038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <HardFault_Handler+0x4>

0800304a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <MemManage_Handler+0x4>

08003050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <BusFault_Handler+0x4>

08003056 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <UsageFault_Handler+0x4>

0800305c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003084:	f000 f892 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <DMA1_Channel1_IRQHandler+0x10>)
 8003092:	f000 fedf 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000046c 	.word	0x2000046c

080030a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM3_IRQHandler+0x10>)
 80030a6:	f002 f8c1 	bl	800522c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200003dc 	.word	0x200003dc

080030b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <TIM4_IRQHandler+0x10>)
 80030ba:	f002 f8b7 	bl	800522c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000388 	.word	0x20000388

080030c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <Reset_Handler>:
 80030d4:	2100      	movs	r1, #0
 80030d6:	e003      	b.n	80030e0 <LoopCopyDataInit>

080030d8 <CopyDataInit>:
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <LoopFillZerobss+0x14>)
 80030da:	585b      	ldr	r3, [r3, r1]
 80030dc:	5043      	str	r3, [r0, r1]
 80030de:	3104      	adds	r1, #4

080030e0 <LoopCopyDataInit>:
 80030e0:	480a      	ldr	r0, [pc, #40]	; (800310c <LoopFillZerobss+0x18>)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <LoopFillZerobss+0x1c>)
 80030e4:	1842      	adds	r2, r0, r1
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3f6      	bcc.n	80030d8 <CopyDataInit>
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <LoopFillZerobss+0x20>)
 80030ec:	e002      	b.n	80030f4 <LoopFillZerobss>

080030ee <FillZerobss>:
 80030ee:	2300      	movs	r3, #0
 80030f0:	f842 3b04 	str.w	r3, [r2], #4

080030f4 <LoopFillZerobss>:
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <LoopFillZerobss+0x24>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3f9      	bcc.n	80030ee <FillZerobss>
 80030fa:	f7ff ffe5 	bl	80030c8 <SystemInit>
 80030fe:	f002 fe4f 	bl	8005da0 <__libc_init_array>
 8003102:	f7fe fb4d 	bl	80017a0 <main>
 8003106:	4770      	bx	lr
 8003108:	080063a8 	.word	0x080063a8
 800310c:	20000000 	.word	0x20000000
 8003110:	200001e8 	.word	0x200001e8
 8003114:	200001e8 	.word	0x200001e8
 8003118:	2000053c 	.word	0x2000053c

0800311c <ADC1_2_IRQHandler>:
 800311c:	e7fe      	b.n	800311c <ADC1_2_IRQHandler>
	...

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_Init+0x28>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_Init+0x28>)
 800312a:	f043 0310 	orr.w	r3, r3, #16
 800312e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 fd93 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	2000      	movs	r0, #0
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fe5e 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fdab 	bl	8003cc6 <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 fd73 	bl	8003c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	2000000c 	.word	0x2000000c
 80031a4:	20000014 	.word	0x20000014
 80031a8:	20000010 	.word	0x20000010

080031ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_IncTick+0x1c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_IncTick+0x20>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a03      	ldr	r2, [pc, #12]	; (80031cc <HAL_IncTick+0x20>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000014 	.word	0x20000014
 80031cc:	20000538 	.word	0x20000538

080031d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <HAL_GetTick+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000538 	.word	0x20000538

080031e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d005      	beq.n	800320a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_Delay+0x40>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800320a:	bf00      	nop
 800320c:	f7ff ffe0 	bl	80031d0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d8f7      	bhi.n	800320c <HAL_Delay+0x28>
  {
  }
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000014 	.word	0x20000014

08003228 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0be      	b.n	80033c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fdfa 	bl	8002e60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 faed 	bl	800384c <ADC_ConversionStop_Disable>
 8003272:	4603      	mov	r3, r0
 8003274:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 8099 	bne.w	80033b6 <HAL_ADC_Init+0x18e>
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 8095 	bne.w	80033b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7b1b      	ldrb	r3, [r3, #12]
 80032ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c0:	d003      	beq.n	80032ca <HAL_ADC_Init+0xa2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_ADC_Init+0xa8>
 80032ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ce:	e000      	b.n	80032d2 <HAL_ADC_Init+0xaa>
 80032d0:	2300      	movs	r3, #0
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7d1b      	ldrb	r3, [r3, #20]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d119      	bne.n	8003314 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7b1b      	ldrb	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	035a      	lsls	r2, r3, #13
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e00b      	b.n	8003314 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_ADC_Init+0x1a8>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	430b      	orrs	r3, r1
 800333a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003344:	d003      	beq.n	800334e <HAL_ADC_Init+0x126>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d104      	bne.n	8003358 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	3b01      	subs	r3, #1
 8003354:	051b      	lsls	r3, r3, #20
 8003356:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	430a      	orrs	r2, r1
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_ADC_Init+0x1ac>)
 8003374:	4013      	ands	r3, r2
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d10b      	bne.n	8003394 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003392:	e018      	b.n	80033c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f023 0312 	bic.w	r3, r3, #18
 800339c:	f043 0210 	orr.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033b4:	e007      	b.n	80033c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	ffe1f7fd 	.word	0xffe1f7fd
 80033d4:	ff1f0efe 	.word	0xff1f0efe

080033d8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a64      	ldr	r2, [pc, #400]	; (8003580 <HAL_ADC_Start_DMA+0x1a8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_ADC_Start_DMA+0x24>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_ADC_Start_DMA+0x1ac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d106      	bne.n	800340a <HAL_ADC_Start_DMA+0x32>
 80033fc:	4b60      	ldr	r3, [pc, #384]	; (8003580 <HAL_ADC_Start_DMA+0x1a8>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 80b3 	bne.w	8003570 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADC_Start_DMA+0x40>
 8003414:	2302      	movs	r3, #2
 8003416:	e0ae      	b.n	8003576 <HAL_ADC_Start_DMA+0x19e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f9c1 	bl	80037a8 <ADC_Enable>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 809a 	bne.w	8003566 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_ADC_Start_DMA+0x1ac>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d105      	bne.n	800345c <HAL_ADC_Start_DMA+0x84>
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_ADC_Start_DMA+0x1a8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d115      	bne.n	8003488 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	2b00      	cmp	r3, #0
 8003474:	d026      	beq.n	80034c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800347e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003486:	e01d      	b.n	80034c4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a39      	ldr	r2, [pc, #228]	; (8003580 <HAL_ADC_Start_DMA+0x1a8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_ADC_Start_DMA+0xd0>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_ADC_Start_DMA+0x1ac>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10d      	bne.n	80034c4 <HAL_ADC_Start_DMA+0xec>
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_ADC_Start_DMA+0x1a8>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f023 0206 	bic.w	r2, r3, #6
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a25      	ldr	r2, [pc, #148]	; (8003588 <HAL_ADC_Start_DMA+0x1b0>)
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a24      	ldr	r2, [pc, #144]	; (800358c <HAL_ADC_Start_DMA+0x1b4>)
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a23      	ldr	r2, [pc, #140]	; (8003590 <HAL_ADC_Start_DMA+0x1b8>)
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0202 	mvn.w	r2, #2
 800350c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a18      	ldr	r0, [r3, #32]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	334c      	adds	r3, #76	; 0x4c
 8003528:	4619      	mov	r1, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f000 fc31 	bl	8003d94 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800353c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003540:	d108      	bne.n	8003554 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003550:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003552:	e00f      	b.n	8003574 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003562:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003564:	e006      	b.n	8003574 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800356e:	e001      	b.n	8003574 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40012400 	.word	0x40012400
 8003584:	40012800 	.word	0x40012800
 8003588:	080038c1 	.word	0x080038c1
 800358c:	0800393d 	.word	0x0800393d
 8003590:	08003959 	.word	0x08003959

08003594 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x20>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0dc      	b.n	8003792 <HAL_ADC_ConfigChannel+0x1da>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d81c      	bhi.n	8003622 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	3b05      	subs	r3, #5
 80035fa:	221f      	movs	r2, #31
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	4019      	ands	r1, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	3b05      	subs	r3, #5
 8003614:	fa00 f203 	lsl.w	r2, r0, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	635a      	str	r2, [r3, #52]	; 0x34
 8003620:	e03c      	b.n	800369c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d81c      	bhi.n	8003664 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b23      	subs	r3, #35	; 0x23
 800363c:	221f      	movs	r2, #31
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	4019      	ands	r1, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b23      	subs	r3, #35	; 0x23
 8003656:	fa00 f203 	lsl.w	r2, r0, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
 8003662:	e01b      	b.n	800369c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b41      	subs	r3, #65	; 0x41
 8003676:	221f      	movs	r2, #31
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	4019      	ands	r1, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	3b41      	subs	r3, #65	; 0x41
 8003690:	fa00 f203 	lsl.w	r2, r0, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	d91c      	bls.n	80036de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68d9      	ldr	r1, [r3, #12]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	3b1e      	subs	r3, #30
 80036b6:	2207      	movs	r2, #7
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	4019      	ands	r1, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6898      	ldr	r0, [r3, #8]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	3b1e      	subs	r3, #30
 80036d0:	fa00 f203 	lsl.w	r2, r0, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e019      	b.n	8003712 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6919      	ldr	r1, [r3, #16]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	2207      	movs	r2, #7
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	4019      	ands	r1, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6898      	ldr	r0, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	fa00 f203 	lsl.w	r2, r0, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d003      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800371e:	2b11      	cmp	r3, #17
 8003720:	d132      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_ADC_ConfigChannel+0x1e4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d125      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d126      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003748:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d11a      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	0c9a      	lsrs	r2, r3, #18
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003768:	e002      	b.n	8003770 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3b01      	subs	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f9      	bne.n	800376a <HAL_ADC_ConfigChannel+0x1b2>
 8003776:	e007      	b.n	8003788 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012400 	.word	0x40012400
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	431bde83 	.word	0x431bde83

080037a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d039      	beq.n	800383a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <ADC_Enable+0x9c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <ADC_Enable+0xa0>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037e4:	e002      	b.n	80037ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f9      	bne.n	80037e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037f2:	f7ff fced 	bl	80031d0 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037f8:	e018      	b.n	800382c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037fa:	f7ff fce9 	bl	80031d0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d911      	bls.n	800382c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	f043 0210 	orr.w	r2, r3, #16
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e007      	b.n	800383c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d1df      	bne.n	80037fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	2000000c 	.word	0x2000000c
 8003848:	431bde83 	.word	0x431bde83

0800384c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d127      	bne.n	80038b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003876:	f7ff fcab 	bl	80031d0 <HAL_GetTick>
 800387a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800387c:	e014      	b.n	80038a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800387e:	f7ff fca7 	bl	80031d0 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d90d      	bls.n	80038a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	f043 0210 	orr.w	r2, r3, #16
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e007      	b.n	80038b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d0e3      	beq.n	800387e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d127      	bne.n	800392a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038f4:	d115      	bne.n	8003922 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d111      	bne.n	8003922 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d105      	bne.n	8003922 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff fe36 	bl	8003594 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003928:	e004      	b.n	8003934 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f7ff f98a 	bl	8002c64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff fe11 	bl	80035a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADCEx_Calibration_Start+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e086      	b.n	8003ab8 <HAL_ADCEx_Calibration_Start+0x12c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff4a 	bl	800384c <ADC_ConversionStop_Disable>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d175      	bne.n	8003aae <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039ca:	f023 0302 	bic.w	r3, r3, #2
 80039ce:	f043 0202 	orr.w	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80039d6:	4b3a      	ldr	r3, [pc, #232]	; (8003ac0 <HAL_ADCEx_Calibration_Start+0x134>)
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	2002      	movs	r0, #2
 80039dc:	f001 f9ce 	bl	8004d7c <HAL_RCCEx_GetPeriphCLKFreq>
 80039e0:	4603      	mov	r3, r0
 80039e2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80039e6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80039e8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80039ea:	e002      	b.n	80039f2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f9      	bne.n	80039ec <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fed5 	bl	80037a8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0208 	orr.w	r2, r2, #8
 8003a0c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a0e:	f7ff fbdf 	bl	80031d0 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a14:	e014      	b.n	8003a40 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a16:	f7ff fbdb 	bl	80031d0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b0a      	cmp	r3, #10
 8003a22:	d90d      	bls.n	8003a40 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f023 0312 	bic.w	r3, r3, #18
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e03b      	b.n	8003ab8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0204 	orr.w	r2, r2, #4
 8003a5c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a5e:	f7ff fbb7 	bl	80031d0 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a64:	e014      	b.n	8003a90 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a66:	f7ff fbb3 	bl	80031d0 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b0a      	cmp	r3, #10
 8003a72:	d90d      	bls.n	8003a90 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f023 0312 	bic.w	r3, r3, #18
 8003a7c:	f043 0210 	orr.w	r2, r3, #16
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e013      	b.n	8003ab8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e3      	bne.n	8003a66 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	2000000c 	.word	0x2000000c

08003ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	60d3      	str	r3, [r2, #12]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <__NVIC_GetPriorityGrouping+0x18>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 0307 	and.w	r3, r3, #7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	db0b      	blt.n	8003b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	f003 021f 	and.w	r2, r3, #31
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <__NVIC_EnableIRQ+0x34>)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2001      	movs	r0, #1
 8003b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db0a      	blt.n	8003b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	490c      	ldr	r1, [pc, #48]	; (8003bac <__NVIC_SetPriority+0x4c>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	440b      	add	r3, r1
 8003b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b88:	e00a      	b.n	8003ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4908      	ldr	r1, [pc, #32]	; (8003bb0 <__NVIC_SetPriority+0x50>)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3b04      	subs	r3, #4
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	761a      	strb	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e100 	.word	0xe000e100
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf28      	it	cs
 8003bd2:	2304      	movcs	r3, #4
 8003bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d902      	bls.n	8003be4 <NVIC_EncodePriority+0x30>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3b03      	subs	r3, #3
 8003be2:	e000      	b.n	8003be6 <NVIC_EncodePriority+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	4313      	orrs	r3, r2
         );
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff90 	bl	8003b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff2d 	bl	8003ac4 <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff42 	bl	8003b0c <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff90 	bl	8003bb4 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff5f 	bl	8003b60 <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff35 	bl	8003b28 <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ffa2 	bl	8003c18 <SysTick_Config>
 8003cd4:	4603      	mov	r3, r0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e043      	b.n	8003d7e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_DMA_Init+0xa8>)
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_DMA_Init+0xac>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_DMA_Init+0xb0>)
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	bffdfff8 	.word	0xbffdfff8
 8003d8c:	cccccccd 	.word	0xcccccccd
 8003d90:	40020000 	.word	0x40020000

08003d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Start_IT+0x20>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e04a      	b.n	8003e4a <HAL_DMA_Start_IT+0xb6>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d13a      	bne.n	8003e3c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f938 	bl	8004060 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 020e 	orr.w	r2, r2, #14
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e00f      	b.n	8003e2a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0204 	bic.w	r2, r2, #4
 8003e18:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 020a 	orr.w	r2, r2, #10
 8003e28:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e005      	b.n	8003e48 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2204      	movs	r2, #4
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d04f      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xc8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d04a      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0204 	bic.w	r2, r2, #4
 8003ea2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a66      	ldr	r2, [pc, #408]	; (8004044 <HAL_DMA_IRQHandler+0x1f0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d029      	beq.n	8003f02 <HAL_DMA_IRQHandler+0xae>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a65      	ldr	r2, [pc, #404]	; (8004048 <HAL_DMA_IRQHandler+0x1f4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_IRQHandler+0xaa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a63      	ldr	r2, [pc, #396]	; (800404c <HAL_DMA_IRQHandler+0x1f8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0xa4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a62      	ldr	r2, [pc, #392]	; (8004050 <HAL_DMA_IRQHandler+0x1fc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d012      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x9e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a60      	ldr	r2, [pc, #384]	; (8004054 <HAL_DMA_IRQHandler+0x200>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x98>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5f      	ldr	r2, [pc, #380]	; (8004058 <HAL_DMA_IRQHandler+0x204>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d102      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0x92>
 8003ee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ee4:	e00e      	b.n	8003f04 <HAL_DMA_IRQHandler+0xb0>
 8003ee6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003eea:	e00b      	b.n	8003f04 <HAL_DMA_IRQHandler+0xb0>
 8003eec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ef0:	e008      	b.n	8003f04 <HAL_DMA_IRQHandler+0xb0>
 8003ef2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ef6:	e005      	b.n	8003f04 <HAL_DMA_IRQHandler+0xb0>
 8003ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efc:	e002      	b.n	8003f04 <HAL_DMA_IRQHandler+0xb0>
 8003efe:	2340      	movs	r3, #64	; 0x40
 8003f00:	e000      	b.n	8003f04 <HAL_DMA_IRQHandler+0xb0>
 8003f02:	2304      	movs	r3, #4
 8003f04:	4a55      	ldr	r2, [pc, #340]	; (800405c <HAL_DMA_IRQHandler+0x208>)
 8003f06:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8094 	beq.w	800403a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f1a:	e08e      	b.n	800403a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2202      	movs	r2, #2
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d056      	beq.n	8003fda <HAL_DMA_IRQHandler+0x186>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d051      	beq.n	8003fda <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10b      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 020a 	bic.w	r2, r2, #10
 8003f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a38      	ldr	r2, [pc, #224]	; (8004044 <HAL_DMA_IRQHandler+0x1f0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d029      	beq.n	8003fba <HAL_DMA_IRQHandler+0x166>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a37      	ldr	r2, [pc, #220]	; (8004048 <HAL_DMA_IRQHandler+0x1f4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x162>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a35      	ldr	r2, [pc, #212]	; (800404c <HAL_DMA_IRQHandler+0x1f8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01a      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x15c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a34      	ldr	r2, [pc, #208]	; (8004050 <HAL_DMA_IRQHandler+0x1fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d012      	beq.n	8003faa <HAL_DMA_IRQHandler+0x156>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a32      	ldr	r2, [pc, #200]	; (8004054 <HAL_DMA_IRQHandler+0x200>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x150>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a31      	ldr	r2, [pc, #196]	; (8004058 <HAL_DMA_IRQHandler+0x204>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d102      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x14a>
 8003f98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f9c:	e00e      	b.n	8003fbc <HAL_DMA_IRQHandler+0x168>
 8003f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fa2:	e00b      	b.n	8003fbc <HAL_DMA_IRQHandler+0x168>
 8003fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fa8:	e008      	b.n	8003fbc <HAL_DMA_IRQHandler+0x168>
 8003faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fae:	e005      	b.n	8003fbc <HAL_DMA_IRQHandler+0x168>
 8003fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb4:	e002      	b.n	8003fbc <HAL_DMA_IRQHandler+0x168>
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	e000      	b.n	8003fbc <HAL_DMA_IRQHandler+0x168>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	4a27      	ldr	r2, [pc, #156]	; (800405c <HAL_DMA_IRQHandler+0x208>)
 8003fbe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d034      	beq.n	800403a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003fd8:	e02f      	b.n	800403a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2208      	movs	r2, #8
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d028      	beq.n	800403c <HAL_DMA_IRQHandler+0x1e8>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d023      	beq.n	800403c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 020e 	bic.w	r2, r2, #14
 8004002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f202 	lsl.w	r2, r1, r2
 8004012:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
    }
  }
  return;
 800403a:	bf00      	nop
 800403c:	bf00      	nop
}
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40020008 	.word	0x40020008
 8004048:	4002001c 	.word	0x4002001c
 800404c:	40020030 	.word	0x40020030
 8004050:	40020044 	.word	0x40020044
 8004054:	40020058 	.word	0x40020058
 8004058:	4002006c 	.word	0x4002006c
 800405c:	40020000 	.word	0x40020000

08004060 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f202 	lsl.w	r2, r1, r2
 800407c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b10      	cmp	r3, #16
 800408c:	d108      	bne.n	80040a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800409e:	e007      	b.n	80040b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040bc:	b480      	push	{r7}
 80040be:	b08b      	sub	sp, #44	; 0x2c
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ce:	e127      	b.n	8004320 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040d0:	2201      	movs	r2, #1
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f040 8116 	bne.w	800431a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b12      	cmp	r3, #18
 80040f4:	d034      	beq.n	8004160 <HAL_GPIO_Init+0xa4>
 80040f6:	2b12      	cmp	r3, #18
 80040f8:	d80d      	bhi.n	8004116 <HAL_GPIO_Init+0x5a>
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d02b      	beq.n	8004156 <HAL_GPIO_Init+0x9a>
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d804      	bhi.n	800410c <HAL_GPIO_Init+0x50>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d031      	beq.n	800416a <HAL_GPIO_Init+0xae>
 8004106:	2b01      	cmp	r3, #1
 8004108:	d01c      	beq.n	8004144 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800410a:	e048      	b.n	800419e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800410c:	2b03      	cmp	r3, #3
 800410e:	d043      	beq.n	8004198 <HAL_GPIO_Init+0xdc>
 8004110:	2b11      	cmp	r3, #17
 8004112:	d01b      	beq.n	800414c <HAL_GPIO_Init+0x90>
          break;
 8004114:	e043      	b.n	800419e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004116:	4a89      	ldr	r2, [pc, #548]	; (800433c <HAL_GPIO_Init+0x280>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d026      	beq.n	800416a <HAL_GPIO_Init+0xae>
 800411c:	4a87      	ldr	r2, [pc, #540]	; (800433c <HAL_GPIO_Init+0x280>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d806      	bhi.n	8004130 <HAL_GPIO_Init+0x74>
 8004122:	4a87      	ldr	r2, [pc, #540]	; (8004340 <HAL_GPIO_Init+0x284>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d020      	beq.n	800416a <HAL_GPIO_Init+0xae>
 8004128:	4a86      	ldr	r2, [pc, #536]	; (8004344 <HAL_GPIO_Init+0x288>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_GPIO_Init+0xae>
          break;
 800412e:	e036      	b.n	800419e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004130:	4a85      	ldr	r2, [pc, #532]	; (8004348 <HAL_GPIO_Init+0x28c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d019      	beq.n	800416a <HAL_GPIO_Init+0xae>
 8004136:	4a85      	ldr	r2, [pc, #532]	; (800434c <HAL_GPIO_Init+0x290>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d016      	beq.n	800416a <HAL_GPIO_Init+0xae>
 800413c:	4a84      	ldr	r2, [pc, #528]	; (8004350 <HAL_GPIO_Init+0x294>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0xae>
          break;
 8004142:	e02c      	b.n	800419e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	623b      	str	r3, [r7, #32]
          break;
 800414a:	e028      	b.n	800419e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	3304      	adds	r3, #4
 8004152:	623b      	str	r3, [r7, #32]
          break;
 8004154:	e023      	b.n	800419e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	3308      	adds	r3, #8
 800415c:	623b      	str	r3, [r7, #32]
          break;
 800415e:	e01e      	b.n	800419e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	330c      	adds	r3, #12
 8004166:	623b      	str	r3, [r7, #32]
          break;
 8004168:	e019      	b.n	800419e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004172:	2304      	movs	r3, #4
 8004174:	623b      	str	r3, [r7, #32]
          break;
 8004176:	e012      	b.n	800419e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d105      	bne.n	800418c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004180:	2308      	movs	r3, #8
 8004182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	611a      	str	r2, [r3, #16]
          break;
 800418a:	e008      	b.n	800419e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800418c:	2308      	movs	r3, #8
 800418e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	615a      	str	r2, [r3, #20]
          break;
 8004196:	e002      	b.n	800419e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004198:	2300      	movs	r3, #0
 800419a:	623b      	str	r3, [r7, #32]
          break;
 800419c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2bff      	cmp	r3, #255	; 0xff
 80041a2:	d801      	bhi.n	80041a8 <HAL_GPIO_Init+0xec>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	e001      	b.n	80041ac <HAL_GPIO_Init+0xf0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2bff      	cmp	r3, #255	; 0xff
 80041b2:	d802      	bhi.n	80041ba <HAL_GPIO_Init+0xfe>
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	e002      	b.n	80041c0 <HAL_GPIO_Init+0x104>
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	3b08      	subs	r3, #8
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	210f      	movs	r1, #15
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	401a      	ands	r2, r3
 80041d2:	6a39      	ldr	r1, [r7, #32]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	431a      	orrs	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8096 	beq.w	800431a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041ee:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_GPIO_Init+0x298>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_GPIO_Init+0x298>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6193      	str	r3, [r2, #24]
 80041fa:	4b56      	ldr	r3, [pc, #344]	; (8004354 <HAL_GPIO_Init+0x298>)
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004206:	4a54      	ldr	r2, [pc, #336]	; (8004358 <HAL_GPIO_Init+0x29c>)
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004212:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a4b      	ldr	r2, [pc, #300]	; (800435c <HAL_GPIO_Init+0x2a0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_GPIO_Init+0x19e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <HAL_GPIO_Init+0x2a4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00d      	beq.n	8004256 <HAL_GPIO_Init+0x19a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a49      	ldr	r2, [pc, #292]	; (8004364 <HAL_GPIO_Init+0x2a8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <HAL_GPIO_Init+0x196>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a48      	ldr	r2, [pc, #288]	; (8004368 <HAL_GPIO_Init+0x2ac>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_GPIO_Init+0x192>
 800424a:	2303      	movs	r3, #3
 800424c:	e006      	b.n	800425c <HAL_GPIO_Init+0x1a0>
 800424e:	2304      	movs	r3, #4
 8004250:	e004      	b.n	800425c <HAL_GPIO_Init+0x1a0>
 8004252:	2302      	movs	r3, #2
 8004254:	e002      	b.n	800425c <HAL_GPIO_Init+0x1a0>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_GPIO_Init+0x1a0>
 800425a:	2300      	movs	r3, #0
 800425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425e:	f002 0203 	and.w	r2, r2, #3
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	4093      	lsls	r3, r2
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800426c:	493a      	ldr	r1, [pc, #232]	; (8004358 <HAL_GPIO_Init+0x29c>)
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	089b      	lsrs	r3, r3, #2
 8004272:	3302      	adds	r3, #2
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <HAL_GPIO_Init+0x2b0>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4938      	ldr	r1, [pc, #224]	; (800436c <HAL_GPIO_Init+0x2b0>)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]
 8004292:	e006      	b.n	80042a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <HAL_GPIO_Init+0x2b0>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	43db      	mvns	r3, r3
 800429c:	4933      	ldr	r1, [pc, #204]	; (800436c <HAL_GPIO_Init+0x2b0>)
 800429e:	4013      	ands	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	492e      	ldr	r1, [pc, #184]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	604b      	str	r3, [r1, #4]
 80042ba:	e006      	b.n	80042ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042bc:	4b2b      	ldr	r3, [pc, #172]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	4929      	ldr	r1, [pc, #164]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	4924      	ldr	r1, [pc, #144]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
 80042e2:	e006      	b.n	80042f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	491f      	ldr	r1, [pc, #124]	; (800436c <HAL_GPIO_Init+0x2b0>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_GPIO_Init+0x2b0>)
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	491a      	ldr	r1, [pc, #104]	; (800436c <HAL_GPIO_Init+0x2b0>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	60cb      	str	r3, [r1, #12]
 800430a:	e006      	b.n	800431a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800430c:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_GPIO_Init+0x2b0>)
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	43db      	mvns	r3, r3
 8004314:	4915      	ldr	r1, [pc, #84]	; (800436c <HAL_GPIO_Init+0x2b0>)
 8004316:	4013      	ands	r3, r2
 8004318:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	3301      	adds	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	f47f aed0 	bne.w	80040d0 <HAL_GPIO_Init+0x14>
  }
}
 8004330:	bf00      	nop
 8004332:	372c      	adds	r7, #44	; 0x2c
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	10210000 	.word	0x10210000
 8004340:	10110000 	.word	0x10110000
 8004344:	10120000 	.word	0x10120000
 8004348:	10310000 	.word	0x10310000
 800434c:	10320000 	.word	0x10320000
 8004350:	10220000 	.word	0x10220000
 8004354:	40021000 	.word	0x40021000
 8004358:	40010000 	.word	0x40010000
 800435c:	40010800 	.word	0x40010800
 8004360:	40010c00 	.word	0x40010c00
 8004364:	40011000 	.word	0x40011000
 8004368:	40011400 	.word	0x40011400
 800436c:	40010400 	.word	0x40010400

08004370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e001      	b.n	8004392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	807b      	strh	r3, [r7, #2]
 80043aa:	4613      	mov	r3, r2
 80043ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043ae:	787b      	ldrb	r3, [r7, #1]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043ba:	e003      	b.n	80043c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	041a      	lsls	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	611a      	str	r2, [r3, #16]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	041a      	lsls	r2, r3, #16
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	400b      	ands	r3, r1
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e26c      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8087 	beq.w	800452e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004420:	4b92      	ldr	r3, [pc, #584]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b04      	cmp	r3, #4
 800442a:	d00c      	beq.n	8004446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800442c:	4b8f      	ldr	r3, [pc, #572]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d112      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
 8004438:	4b8c      	ldr	r3, [pc, #560]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d10b      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d06c      	beq.n	800452c <HAL_RCC_OscConfig+0x12c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d168      	bne.n	800452c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e246      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x76>
 8004468:	4b80      	ldr	r3, [pc, #512]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a7f      	ldr	r2, [pc, #508]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800446e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e02e      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x98>
 800447e:	4b7b      	ldr	r3, [pc, #492]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7a      	ldr	r2, [pc, #488]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b78      	ldr	r3, [pc, #480]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a77      	ldr	r2, [pc, #476]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e01d      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0xbc>
 80044a2:	4b72      	ldr	r3, [pc, #456]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a71      	ldr	r2, [pc, #452]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6e      	ldr	r2, [pc, #440]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 80044bc:	4b6b      	ldr	r3, [pc, #428]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6a      	ldr	r2, [pc, #424]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b68      	ldr	r3, [pc, #416]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a67      	ldr	r2, [pc, #412]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fe78 	bl	80031d0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe fe74 	bl	80031d0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1fa      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b5d      	ldr	r3, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0xe4>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fe fe64 	bl	80031d0 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fe fe60 	bl	80031d0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1e6      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x10c>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d063      	beq.n	8004602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800453a:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004546:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d11c      	bne.n	800458c <HAL_RCC_OscConfig+0x18c>
 8004552:	4b46      	ldr	r3, [pc, #280]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d116      	bne.n	800458c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x176>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d001      	beq.n	8004576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e1ba      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4939      	ldr	r1, [pc, #228]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	e03a      	b.n	8004602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCC_OscConfig+0x270>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fe fe19 	bl	80031d0 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a2:	f7fe fe15 	bl	80031d0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e19b      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4927      	ldr	r1, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	600b      	str	r3, [r1, #0]
 80045d4:	e015      	b.n	8004602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <HAL_RCC_OscConfig+0x270>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fe fdf8 	bl	80031d0 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fe fdf4 	bl	80031d0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e17a      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03a      	beq.n	8004684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d019      	beq.n	800464a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fe fdd8 	bl	80031d0 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fe fdd4 	bl	80031d0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e15a      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004642:	2001      	movs	r0, #1
 8004644:	f000 fac6 	bl	8004bd4 <RCC_Delay>
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004650:	f7fe fdbe 	bl	80031d0 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004656:	e00f      	b.n	8004678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004658:	f7fe fdba 	bl	80031d0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d908      	bls.n	8004678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e140      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	42420000 	.word	0x42420000
 8004674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b9e      	ldr	r3, [pc, #632]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e9      	bne.n	8004658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a6 	beq.w	80047de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b97      	ldr	r3, [pc, #604]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b94      	ldr	r3, [pc, #592]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	4a93      	ldr	r2, [pc, #588]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	61d3      	str	r3, [r2, #28]
 80046ae:	4b91      	ldr	r3, [pc, #580]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b8e      	ldr	r3, [pc, #568]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fe fd7b 	bl	80031d0 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fe fd77 	bl	80031d0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	; 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e0fd      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x312>
 8004704:	4b7b      	ldr	r3, [pc, #492]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a7a      	ldr	r2, [pc, #488]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6213      	str	r3, [r2, #32]
 8004710:	e02d      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x334>
 800471a:	4b76      	ldr	r3, [pc, #472]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4a75      	ldr	r2, [pc, #468]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6213      	str	r3, [r2, #32]
 8004726:	4b73      	ldr	r3, [pc, #460]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4a72      	ldr	r2, [pc, #456]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	6213      	str	r3, [r2, #32]
 8004732:	e01c      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b05      	cmp	r3, #5
 800473a:	d10c      	bne.n	8004756 <HAL_RCC_OscConfig+0x356>
 800473c:	4b6d      	ldr	r3, [pc, #436]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a6c      	ldr	r2, [pc, #432]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	6213      	str	r3, [r2, #32]
 8004748:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4a69      	ldr	r2, [pc, #420]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6213      	str	r3, [r2, #32]
 8004754:	e00b      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a66      	ldr	r2, [pc, #408]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	4b64      	ldr	r3, [pc, #400]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a63      	ldr	r2, [pc, #396]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d015      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7fe fd2b 	bl	80031d0 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fe fd27 	bl	80031d0 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	; 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0ab      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	4b57      	ldr	r3, [pc, #348]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ee      	beq.n	800477e <HAL_RCC_OscConfig+0x37e>
 80047a0:	e014      	b.n	80047cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a2:	f7fe fd15 	bl	80031d0 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fe fd11 	bl	80031d0 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e095      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ee      	bne.n	80047aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b48      	ldr	r3, [pc, #288]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4a47      	ldr	r2, [pc, #284]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8081 	beq.w	80048ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d061      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d146      	bne.n	800488a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x4fc>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe fce5 	bl	80031d0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe fce1 	bl	80031d0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e067      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004832:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	492d      	ldr	r1, [pc, #180]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004844:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a19      	ldr	r1, [r3, #32]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	430b      	orrs	r3, r1
 8004856:	4927      	ldr	r1, [pc, #156]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_RCC_OscConfig+0x4fc>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fe fcb5 	bl	80031d0 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486a:	f7fe fcb1 	bl	80031d0 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e037      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x46a>
 8004888:	e02f      	b.n	80048ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <HAL_RCC_OscConfig+0x4fc>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe fc9e 	bl	80031d0 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fe fc9a 	bl	80031d0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e020      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x498>
 80048b6:	e018      	b.n	80048ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e013      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_OscConfig+0x4f4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d001      	beq.n	80048ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42420060 	.word	0x42420060

08004900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0d0      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d910      	bls.n	8004944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b67      	ldr	r3, [pc, #412]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 0207 	bic.w	r2, r3, #7
 800492a:	4965      	ldr	r1, [pc, #404]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b63      	ldr	r3, [pc, #396]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0b8      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800495c:	4b59      	ldr	r3, [pc, #356]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4a58      	ldr	r2, [pc, #352]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004974:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4a52      	ldr	r2, [pc, #328]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800497e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	494d      	ldr	r1, [pc, #308]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d040      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d115      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e073      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e06b      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4936      	ldr	r1, [pc, #216]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fe fbee 	bl	80031d0 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fe fbea 	bl	80031d0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e053      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d210      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	4922      	ldr	r1, [pc, #136]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e032      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4916      	ldr	r1, [pc, #88]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	490e      	ldr	r1, [pc, #56]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a8e:	f000 f821 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a92:	4601      	mov	r1, r0
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	5cd3      	ldrb	r3, [r2, r3]
 8004aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8004aa6:	4a09      	ldr	r2, [pc, #36]	; (8004acc <HAL_RCC_ClockConfig+0x1cc>)
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fb4c 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40022000 	.word	0x40022000
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	08006258 	.word	0x08006258
 8004acc:	2000000c 	.word	0x2000000c
 8004ad0:	20000010 	.word	0x20000010

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	b490      	push	{r4, r7}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ada:	4b2a      	ldr	r3, [pc, #168]	; (8004b84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004adc:	1d3c      	adds	r4, r7, #4
 8004ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ae4:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	2300      	movs	r3, #0
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d002      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x40>
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d003      	beq.n	8004b1a <HAL_RCC_GetSysClockFreq+0x46>
 8004b12:	e02d      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b14:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b16:	623b      	str	r3, [r7, #32]
      break;
 8004b18:	e02d      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	0c9b      	lsrs	r3, r3, #18
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b26:	4413      	add	r3, r2
 8004b28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	0c5b      	lsrs	r3, r3, #17
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b46:	4413      	add	r3, r2
 8004b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b52:	fb02 f203 	mul.w	r2, r2, r3
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	e004      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	623b      	str	r3, [r7, #32]
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b72:	623b      	str	r3, [r7, #32]
      break;
 8004b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b76:	6a3b      	ldr	r3, [r7, #32]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc90      	pop	{r4, r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	0800621c 	.word	0x0800621c
 8004b88:	0800622c 	.word	0x0800622c
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	007a1200 	.word	0x007a1200
 8004b94:	003d0900 	.word	0x003d0900

08004b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b02      	ldr	r3, [pc, #8]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	2000000c 	.word	0x2000000c

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bb0:	f7ff fff2 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	0adb      	lsrs	r3, r3, #11
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	08006268 	.word	0x08006268

08004bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <RCC_Delay+0x34>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <RCC_Delay+0x38>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	0a5b      	lsrs	r3, r3, #9
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bf0:	bf00      	nop
  }
  while (Delay --);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	60fa      	str	r2, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f9      	bne.n	8004bf0 <RCC_Delay+0x1c>
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	10624dd3 	.word	0x10624dd3

08004c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d07d      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c30:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10d      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4a4b      	ldr	r2, [pc, #300]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c46:	61d3      	str	r3, [r2, #28]
 8004c48:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	4b46      	ldr	r3, [pc, #280]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d118      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a42      	ldr	r2, [pc, #264]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c70:	f7fe faae 	bl	80031d0 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c76:	e008      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fe faaa 	bl	80031d0 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e06d      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	4b3a      	ldr	r3, [pc, #232]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02e      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d027      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb4:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cbe:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc4:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cca:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d014      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fe fa79 	bl	80031d0 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fe fa75 	bl	80031d0 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e036      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ee      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4917      	ldr	r1, [pc, #92]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d34:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	490b      	ldr	r1, [pc, #44]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4904      	ldr	r1, [pc, #16]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42420440 	.word	0x42420440

08004d7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b08d      	sub	sp, #52	; 0x34
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d84:	4b55      	ldr	r3, [pc, #340]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004d86:	f107 040c 	add.w	r4, r7, #12
 8004d8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d90:	4b53      	ldr	r3, [pc, #332]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9e:	2300      	movs	r3, #0
 8004da0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	2300      	movs	r3, #0
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d07f      	beq.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d002      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d048      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004db8:	e08b      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004dba:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004dc0:	4b48      	ldr	r3, [pc, #288]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d07f      	beq.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	0c9b      	lsrs	r3, r3, #18
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dd8:	4413      	add	r3, r2
 8004dda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dde:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dea:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	0c5b      	lsrs	r3, r3, #17
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004df8:	4413      	add	r3, r2
 8004dfa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00d      	beq.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e0a:	4a37      	ldr	r2, [pc, #220]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	fb02 f303 	mul.w	r3, r2, r3
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	4a33      	ldr	r2, [pc, #204]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e20:	fb02 f303 	mul.w	r3, r2, r3
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e32:	d102      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e38:	e048      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e48:	e040      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	d108      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6c:	e01f      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e78:	d109      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004e86:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8c:	e00f      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d11a      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d014      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004ea6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004eac:	e010      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004eae:	e00f      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eb0:	f7ff fe7c 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	0b9b      	lsrs	r3, r3, #14
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004eca:	e002      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004ecc:	bf00      	nop
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004ed0:	bf00      	nop
    }
  }
  return (frequency);
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3734      	adds	r7, #52	; 0x34
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}
 8004edc:	08006230 	.word	0x08006230
 8004ee0:	08006240 	.word	0x08006240
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	007a1200 	.word	0x007a1200
 8004eec:	003d0900 	.word	0x003d0900
 8004ef0:	aaaaaaab 	.word	0xaaaaaaab

08004ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e041      	b.n	8004f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fe f808 	bl	8002f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fc1c 	bl	8005770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e03a      	b.n	8005022 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <HAL_TIM_Base_Start_IT+0x98>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x58>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d009      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x58>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a14      	ldr	r2, [pc, #80]	; (8005030 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x58>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <HAL_TIM_Base_Start_IT+0xa0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d111      	bne.n	8005010 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d010      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	e007      	b.n	8005020 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800

08005038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e041      	b.n	80050ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f839 	bl	80050d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f000 fb7a 	bl	8005770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_TIM_PWM_Start+0x24>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e022      	b.n	8005152 <HAL_TIM_PWM_Start+0x6a>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d109      	bne.n	8005126 <HAL_TIM_PWM_Start+0x3e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e015      	b.n	8005152 <HAL_TIM_PWM_Start+0x6a>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x58>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e008      	b.n	8005152 <HAL_TIM_PWM_Start+0x6a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e05e      	b.n	8005218 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Start+0x82>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005168:	e013      	b.n	8005192 <HAL_TIM_PWM_Start+0xaa>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start+0x92>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	e00b      	b.n	8005192 <HAL_TIM_PWM_Start+0xaa>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005188:	e003      	b.n	8005192 <HAL_TIM_PWM_Start+0xaa>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fd68 	bl	8005c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_TIM_PWM_Start+0x138>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d107      	bne.n	80051ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_TIM_PWM_Start+0x138>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_TIM_PWM_Start+0xfa>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d009      	beq.n	80051e2 <HAL_TIM_PWM_Start+0xfa>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a14      	ldr	r2, [pc, #80]	; (8005224 <HAL_TIM_PWM_Start+0x13c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_TIM_PWM_Start+0xfa>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a12      	ldr	r2, [pc, #72]	; (8005228 <HAL_TIM_PWM_Start+0x140>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d111      	bne.n	8005206 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b06      	cmp	r3, #6
 80051f2:	d010      	beq.n	8005216 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	e007      	b.n	8005216 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800

0800522c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b02      	cmp	r3, #2
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b02      	cmp	r3, #2
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0202 	mvn.w	r2, #2
 8005258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa62 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa55 	bl	8005726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fa64 	bl	800574a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0204 	mvn.w	r2, #4
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa38 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa2b 	bl	8005726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa3a 	bl	800574a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0208 	mvn.w	r2, #8
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa0e 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa01 	bl	8005726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa10 	bl	800574a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b10      	cmp	r3, #16
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0210 	mvn.w	r2, #16
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2208      	movs	r2, #8
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f9e4 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9d7 	bl	8005726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f9e6 	bl	800574a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b01      	cmp	r3, #1
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0201 	mvn.w	r2, #1
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fd fbd8 	bl	8002b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	2b80      	cmp	r3, #128	; 0x80
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fcd5 	bl	8005d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9aa 	bl	800575c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b20      	cmp	r3, #32
 8005414:	d10e      	bne.n	8005434 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b20      	cmp	r3, #32
 8005422:	d107      	bne.n	8005434 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0220 	mvn.w	r2, #32
 800542c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fca0 	bl	8005d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005452:	2302      	movs	r3, #2
 8005454:	e0ac      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	f200 809f 	bhi.w	80055a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080055a5 	.word	0x080055a5
 8005474:	080055a5 	.word	0x080055a5
 8005478:	080055a5 	.word	0x080055a5
 800547c:	080054e1 	.word	0x080054e1
 8005480:	080055a5 	.word	0x080055a5
 8005484:	080055a5 	.word	0x080055a5
 8005488:	080055a5 	.word	0x080055a5
 800548c:	08005523 	.word	0x08005523
 8005490:	080055a5 	.word	0x080055a5
 8005494:	080055a5 	.word	0x080055a5
 8005498:	080055a5 	.word	0x080055a5
 800549c:	08005563 	.word	0x08005563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f9c4 	bl	8005834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0208 	orr.w	r2, r2, #8
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	619a      	str	r2, [r3, #24]
      break;
 80054de:	e062      	b.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fa0a 	bl	8005900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6999      	ldr	r1, [r3, #24]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	619a      	str	r2, [r3, #24]
      break;
 8005520:	e041      	b.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa53 	bl	80059d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0208 	orr.w	r2, r2, #8
 800553c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0204 	bic.w	r2, r2, #4
 800554c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	61da      	str	r2, [r3, #28]
      break;
 8005560:	e021      	b.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa9d 	bl	8005aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69d9      	ldr	r1, [r3, #28]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	021a      	lsls	r2, r3, #8
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	61da      	str	r2, [r3, #28]
      break;
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80055a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_TIM_ConfigClockSource+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e0a6      	b.n	800571e <HAL_TIM_ConfigClockSource+0x166>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d067      	beq.n	80056d8 <HAL_TIM_ConfigClockSource+0x120>
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d80b      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x6c>
 800560c:	2b10      	cmp	r3, #16
 800560e:	d073      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x140>
 8005610:	2b10      	cmp	r3, #16
 8005612:	d802      	bhi.n	800561a <HAL_TIM_ConfigClockSource+0x62>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d06f      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005618:	e078      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800561a:	2b20      	cmp	r3, #32
 800561c:	d06c      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x140>
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d06a      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005622:	e073      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005624:	2b70      	cmp	r3, #112	; 0x70
 8005626:	d00d      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0x8c>
 8005628:	2b70      	cmp	r3, #112	; 0x70
 800562a:	d804      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x7e>
 800562c:	2b50      	cmp	r3, #80	; 0x50
 800562e:	d033      	beq.n	8005698 <HAL_TIM_ConfigClockSource+0xe0>
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d041      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005634:	e06a      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d066      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x152>
 800563c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005640:	d017      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005642:	e063      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f000 faed 	bl	8005c32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005666:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]
      break;
 8005670:	e04c      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6899      	ldr	r1, [r3, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f000 fad6 	bl	8005c32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005694:	609a      	str	r2, [r3, #8]
      break;
 8005696:	e039      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	6859      	ldr	r1, [r3, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	461a      	mov	r2, r3
 80056a6:	f000 fa4d 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2150      	movs	r1, #80	; 0x50
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 faa4 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 80056b6:	e029      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	461a      	mov	r2, r3
 80056c6:	f000 fa6b 	bl	8005ba0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2160      	movs	r1, #96	; 0x60
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fa94 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 80056d6:	e019      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f000 fa2d 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2140      	movs	r1, #64	; 0x40
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fa84 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 80056f6:	e009      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 fa7b 	bl	8005bfe <TIM_ITRx_SetConfig>
        break;
 8005708:	e000      	b.n	800570c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800570a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
	...

08005770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a29      	ldr	r2, [pc, #164]	; (8005828 <TIM_Base_SetConfig+0xb8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_Base_SetConfig+0x30>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578e:	d007      	beq.n	80057a0 <TIM_Base_SetConfig+0x30>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a26      	ldr	r2, [pc, #152]	; (800582c <TIM_Base_SetConfig+0xbc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0x30>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a25      	ldr	r2, [pc, #148]	; (8005830 <TIM_Base_SetConfig+0xc0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d108      	bne.n	80057b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <TIM_Base_SetConfig+0xb8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0x62>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0x62>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a19      	ldr	r2, [pc, #100]	; (800582c <TIM_Base_SetConfig+0xbc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <TIM_Base_SetConfig+0xc0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a07      	ldr	r2, [pc, #28]	; (8005828 <TIM_Base_SetConfig+0xb8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d103      	bne.n	8005818 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	615a      	str	r2, [r3, #20]
}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800

08005834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0302 	bic.w	r3, r3, #2
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <TIM_OC1_SetConfig+0xc8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10c      	bne.n	80058aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0308 	bic.w	r3, r3, #8
 8005896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a13      	ldr	r2, [pc, #76]	; (80058fc <TIM_OC1_SetConfig+0xc8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d111      	bne.n	80058d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00

08005900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0210 	bic.w	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0320 	bic.w	r3, r3, #32
 800594a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <TIM_OC2_SetConfig+0xd0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10d      	bne.n	800597c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <TIM_OC2_SetConfig+0xd0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d113      	bne.n	80059ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800598a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00

080059d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <TIM_OC3_SetConfig+0xd0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10d      	bne.n	8005a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <TIM_OC3_SetConfig+0xd0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d113      	bne.n	8005a7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40012c00 	.word	0x40012c00

08005aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	031b      	lsls	r3, r3, #12
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a0f      	ldr	r2, [pc, #60]	; (8005b40 <TIM_OC4_SetConfig+0x98>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d109      	bne.n	8005b1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	40012c00 	.word	0x40012c00

08005b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 030a 	bic.w	r3, r3, #10
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f023 0210 	bic.w	r2, r3, #16
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	031b      	lsls	r3, r3, #12
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	621a      	str	r2, [r3, #32]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f043 0307 	orr.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	021a      	lsls	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	609a      	str	r2, [r3, #8]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2201      	movs	r2, #1
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e046      	b.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a12      	ldr	r2, [pc, #72]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10c      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800

08005d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <atoi>:
 8005d98:	220a      	movs	r2, #10
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f000 b8ca 	b.w	8005f34 <strtol>

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	2500      	movs	r5, #0
 8005da4:	4e0c      	ldr	r6, [pc, #48]	; (8005dd8 <__libc_init_array+0x38>)
 8005da6:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da8:	1ba4      	subs	r4, r4, r6
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	f000 f936 	bl	8006020 <_init>
 8005db4:	2500      	movs	r5, #0
 8005db6:	4e0a      	ldr	r6, [pc, #40]	; (8005de0 <__libc_init_array+0x40>)
 8005db8:	4c0a      	ldr	r4, [pc, #40]	; (8005de4 <__libc_init_array+0x44>)
 8005dba:	1ba4      	subs	r4, r4, r6
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	42a5      	cmp	r5, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc8:	4798      	blx	r3
 8005dca:	3501      	adds	r5, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd2:	4798      	blx	r3
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	080063a0 	.word	0x080063a0
 8005ddc:	080063a0 	.word	0x080063a0
 8005de0:	080063a0 	.word	0x080063a0
 8005de4:	080063a4 	.word	0x080063a4

08005de8 <__itoa>:
 8005de8:	1e93      	subs	r3, r2, #2
 8005dea:	2b22      	cmp	r3, #34	; 0x22
 8005dec:	b510      	push	{r4, lr}
 8005dee:	460c      	mov	r4, r1
 8005df0:	d904      	bls.n	8005dfc <__itoa+0x14>
 8005df2:	2300      	movs	r3, #0
 8005df4:	461c      	mov	r4, r3
 8005df6:	700b      	strb	r3, [r1, #0]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	bd10      	pop	{r4, pc}
 8005dfc:	2a0a      	cmp	r2, #10
 8005dfe:	d109      	bne.n	8005e14 <__itoa+0x2c>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	da07      	bge.n	8005e14 <__itoa+0x2c>
 8005e04:	232d      	movs	r3, #45	; 0x2d
 8005e06:	700b      	strb	r3, [r1, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4240      	negs	r0, r0
 8005e0c:	4421      	add	r1, r4
 8005e0e:	f000 f8a7 	bl	8005f60 <__utoa>
 8005e12:	e7f1      	b.n	8005df8 <__itoa+0x10>
 8005e14:	2100      	movs	r1, #0
 8005e16:	e7f9      	b.n	8005e0c <__itoa+0x24>

08005e18 <itoa>:
 8005e18:	f7ff bfe6 	b.w	8005de8 <__itoa>

08005e1c <memset>:
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4402      	add	r2, r0
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d100      	bne.n	8005e26 <memset+0xa>
 8005e24:	4770      	bx	lr
 8005e26:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2a:	e7f9      	b.n	8005e20 <memset+0x4>

08005e2c <strcpy>:
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e32:	f803 2b01 	strb.w	r2, [r3], #1
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	d1f9      	bne.n	8005e2e <strcpy+0x2>
 8005e3a:	4770      	bx	lr

08005e3c <_strtol_l.isra.0>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	4680      	mov	r8, r0
 8005e42:	4689      	mov	r9, r1
 8005e44:	4692      	mov	sl, r2
 8005e46:	461e      	mov	r6, r3
 8005e48:	460f      	mov	r7, r1
 8005e4a:	463d      	mov	r5, r7
 8005e4c:	9808      	ldr	r0, [sp, #32]
 8005e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e52:	f000 f8c3 	bl	8005fdc <__locale_ctype_ptr_l>
 8005e56:	4420      	add	r0, r4
 8005e58:	7843      	ldrb	r3, [r0, #1]
 8005e5a:	f013 0308 	ands.w	r3, r3, #8
 8005e5e:	d132      	bne.n	8005ec6 <_strtol_l.isra.0+0x8a>
 8005e60:	2c2d      	cmp	r4, #45	; 0x2d
 8005e62:	d132      	bne.n	8005eca <_strtol_l.isra.0+0x8e>
 8005e64:	2201      	movs	r2, #1
 8005e66:	787c      	ldrb	r4, [r7, #1]
 8005e68:	1cbd      	adds	r5, r7, #2
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	d05d      	beq.n	8005f2a <_strtol_l.isra.0+0xee>
 8005e6e:	2e10      	cmp	r6, #16
 8005e70:	d109      	bne.n	8005e86 <_strtol_l.isra.0+0x4a>
 8005e72:	2c30      	cmp	r4, #48	; 0x30
 8005e74:	d107      	bne.n	8005e86 <_strtol_l.isra.0+0x4a>
 8005e76:	782b      	ldrb	r3, [r5, #0]
 8005e78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e7c:	2b58      	cmp	r3, #88	; 0x58
 8005e7e:	d14f      	bne.n	8005f20 <_strtol_l.isra.0+0xe4>
 8005e80:	2610      	movs	r6, #16
 8005e82:	786c      	ldrb	r4, [r5, #1]
 8005e84:	3502      	adds	r5, #2
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	bf14      	ite	ne
 8005e8a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005e8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005e92:	2700      	movs	r7, #0
 8005e94:	fbb1 fcf6 	udiv	ip, r1, r6
 8005e98:	4638      	mov	r0, r7
 8005e9a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005e9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005ea2:	2b09      	cmp	r3, #9
 8005ea4:	d817      	bhi.n	8005ed6 <_strtol_l.isra.0+0x9a>
 8005ea6:	461c      	mov	r4, r3
 8005ea8:	42a6      	cmp	r6, r4
 8005eaa:	dd23      	ble.n	8005ef4 <_strtol_l.isra.0+0xb8>
 8005eac:	1c7b      	adds	r3, r7, #1
 8005eae:	d007      	beq.n	8005ec0 <_strtol_l.isra.0+0x84>
 8005eb0:	4584      	cmp	ip, r0
 8005eb2:	d31c      	bcc.n	8005eee <_strtol_l.isra.0+0xb2>
 8005eb4:	d101      	bne.n	8005eba <_strtol_l.isra.0+0x7e>
 8005eb6:	45a6      	cmp	lr, r4
 8005eb8:	db19      	blt.n	8005eee <_strtol_l.isra.0+0xb2>
 8005eba:	2701      	movs	r7, #1
 8005ebc:	fb00 4006 	mla	r0, r0, r6, r4
 8005ec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ec4:	e7eb      	b.n	8005e9e <_strtol_l.isra.0+0x62>
 8005ec6:	462f      	mov	r7, r5
 8005ec8:	e7bf      	b.n	8005e4a <_strtol_l.isra.0+0xe>
 8005eca:	2c2b      	cmp	r4, #43	; 0x2b
 8005ecc:	bf04      	itt	eq
 8005ece:	1cbd      	addeq	r5, r7, #2
 8005ed0:	787c      	ldrbeq	r4, [r7, #1]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	e7c9      	b.n	8005e6a <_strtol_l.isra.0+0x2e>
 8005ed6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005eda:	2b19      	cmp	r3, #25
 8005edc:	d801      	bhi.n	8005ee2 <_strtol_l.isra.0+0xa6>
 8005ede:	3c37      	subs	r4, #55	; 0x37
 8005ee0:	e7e2      	b.n	8005ea8 <_strtol_l.isra.0+0x6c>
 8005ee2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ee6:	2b19      	cmp	r3, #25
 8005ee8:	d804      	bhi.n	8005ef4 <_strtol_l.isra.0+0xb8>
 8005eea:	3c57      	subs	r4, #87	; 0x57
 8005eec:	e7dc      	b.n	8005ea8 <_strtol_l.isra.0+0x6c>
 8005eee:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef2:	e7e5      	b.n	8005ec0 <_strtol_l.isra.0+0x84>
 8005ef4:	1c7b      	adds	r3, r7, #1
 8005ef6:	d108      	bne.n	8005f0a <_strtol_l.isra.0+0xce>
 8005ef8:	2322      	movs	r3, #34	; 0x22
 8005efa:	4608      	mov	r0, r1
 8005efc:	f8c8 3000 	str.w	r3, [r8]
 8005f00:	f1ba 0f00 	cmp.w	sl, #0
 8005f04:	d107      	bne.n	8005f16 <_strtol_l.isra.0+0xda>
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	b102      	cbz	r2, 8005f0e <_strtol_l.isra.0+0xd2>
 8005f0c:	4240      	negs	r0, r0
 8005f0e:	f1ba 0f00 	cmp.w	sl, #0
 8005f12:	d0f8      	beq.n	8005f06 <_strtol_l.isra.0+0xca>
 8005f14:	b10f      	cbz	r7, 8005f1a <_strtol_l.isra.0+0xde>
 8005f16:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f1a:	f8ca 9000 	str.w	r9, [sl]
 8005f1e:	e7f2      	b.n	8005f06 <_strtol_l.isra.0+0xca>
 8005f20:	2430      	movs	r4, #48	; 0x30
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d1af      	bne.n	8005e86 <_strtol_l.isra.0+0x4a>
 8005f26:	2608      	movs	r6, #8
 8005f28:	e7ad      	b.n	8005e86 <_strtol_l.isra.0+0x4a>
 8005f2a:	2c30      	cmp	r4, #48	; 0x30
 8005f2c:	d0a3      	beq.n	8005e76 <_strtol_l.isra.0+0x3a>
 8005f2e:	260a      	movs	r6, #10
 8005f30:	e7a9      	b.n	8005e86 <_strtol_l.isra.0+0x4a>
	...

08005f34 <strtol>:
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <strtol+0x24>)
 8005f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f38:	681c      	ldr	r4, [r3, #0]
 8005f3a:	4d08      	ldr	r5, [pc, #32]	; (8005f5c <strtol+0x28>)
 8005f3c:	6a23      	ldr	r3, [r4, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf08      	it	eq
 8005f42:	462b      	moveq	r3, r5
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	460a      	mov	r2, r1
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff ff75 	bl	8005e3c <_strtol_l.isra.0>
 8005f52:	b003      	add	sp, #12
 8005f54:	bd30      	pop	{r4, r5, pc}
 8005f56:	bf00      	nop
 8005f58:	20000018 	.word	0x20000018
 8005f5c:	2000007c 	.word	0x2000007c

08005f60 <__utoa>:
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	b08b      	sub	sp, #44	; 0x2c
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	466e      	mov	r6, sp
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <__utoa+0x78>)
 8005f6c:	f103 0c20 	add.w	ip, r3, #32
 8005f70:	4637      	mov	r7, r6
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	6859      	ldr	r1, [r3, #4]
 8005f76:	3308      	adds	r3, #8
 8005f78:	c703      	stmia	r7!, {r0, r1}
 8005f7a:	4563      	cmp	r3, ip
 8005f7c:	463e      	mov	r6, r7
 8005f7e:	d1f7      	bne.n	8005f70 <__utoa+0x10>
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	791b      	ldrb	r3, [r3, #4]
 8005f84:	6038      	str	r0, [r7, #0]
 8005f86:	713b      	strb	r3, [r7, #4]
 8005f88:	1e93      	subs	r3, r2, #2
 8005f8a:	2b22      	cmp	r3, #34	; 0x22
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	d904      	bls.n	8005f9c <__utoa+0x3c>
 8005f92:	7023      	strb	r3, [r4, #0]
 8005f94:	461c      	mov	r4, r3
 8005f96:	4620      	mov	r0, r4
 8005f98:	b00b      	add	sp, #44	; 0x2c
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9c:	1e66      	subs	r6, r4, #1
 8005f9e:	fbb5 f0f2 	udiv	r0, r5, r2
 8005fa2:	fb02 5510 	mls	r5, r2, r0, r5
 8005fa6:	af0a      	add	r7, sp, #40	; 0x28
 8005fa8:	443d      	add	r5, r7
 8005faa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	b968      	cbnz	r0, 8005fd4 <__utoa+0x74>
 8005fb8:	4622      	mov	r2, r4
 8005fba:	5460      	strb	r0, [r4, r1]
 8005fbc:	4423      	add	r3, r4
 8005fbe:	1b19      	subs	r1, r3, r4
 8005fc0:	1b10      	subs	r0, r2, r4
 8005fc2:	4281      	cmp	r1, r0
 8005fc4:	dde7      	ble.n	8005f96 <__utoa+0x36>
 8005fc6:	7811      	ldrb	r1, [r2, #0]
 8005fc8:	7818      	ldrb	r0, [r3, #0]
 8005fca:	f802 0b01 	strb.w	r0, [r2], #1
 8005fce:	f803 1901 	strb.w	r1, [r3], #-1
 8005fd2:	e7f4      	b.n	8005fbe <__utoa+0x5e>
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	e7e2      	b.n	8005f9e <__utoa+0x3e>
 8005fd8:	08006270 	.word	0x08006270

08005fdc <__locale_ctype_ptr_l>:
 8005fdc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005fe0:	4770      	bx	lr

08005fe2 <__ascii_mbtowc>:
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	b901      	cbnz	r1, 8005fe8 <__ascii_mbtowc+0x6>
 8005fe6:	a901      	add	r1, sp, #4
 8005fe8:	b142      	cbz	r2, 8005ffc <__ascii_mbtowc+0x1a>
 8005fea:	b14b      	cbz	r3, 8006000 <__ascii_mbtowc+0x1e>
 8005fec:	7813      	ldrb	r3, [r2, #0]
 8005fee:	600b      	str	r3, [r1, #0]
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	1c10      	adds	r0, r2, #0
 8005ff4:	bf18      	it	ne
 8005ff6:	2001      	movne	r0, #1
 8005ff8:	b002      	add	sp, #8
 8005ffa:	4770      	bx	lr
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	e7fb      	b.n	8005ff8 <__ascii_mbtowc+0x16>
 8006000:	f06f 0001 	mvn.w	r0, #1
 8006004:	e7f8      	b.n	8005ff8 <__ascii_mbtowc+0x16>

08006006 <__ascii_wctomb>:
 8006006:	b149      	cbz	r1, 800601c <__ascii_wctomb+0x16>
 8006008:	2aff      	cmp	r2, #255	; 0xff
 800600a:	bf8b      	itete	hi
 800600c:	238a      	movhi	r3, #138	; 0x8a
 800600e:	700a      	strbls	r2, [r1, #0]
 8006010:	6003      	strhi	r3, [r0, #0]
 8006012:	2001      	movls	r0, #1
 8006014:	bf88      	it	hi
 8006016:	f04f 30ff 	movhi.w	r0, #4294967295
 800601a:	4770      	bx	lr
 800601c:	4608      	mov	r0, r1
 800601e:	4770      	bx	lr

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
